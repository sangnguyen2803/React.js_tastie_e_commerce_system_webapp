{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/Commons/Overlay/Popup/Panel/NotificationPanel.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport \"style/Common.scss\";\nimport { useTranslation } from \"react-i18next\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faScroll } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./NotificationPanel.scss\";\nimport moment from \"moment\";\nimport { updateReadStatusAPI } from \"store/actions/OrderAction/OrderAction\";\nimport { faBicycle, faDotCircle, faEnvelope, faStore, faTag } from \"@fortawesome/fontawesome-free-solid\";\nimport { setNotificationSocket } from \"store/actions/UserAction/UserAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NotificationPanel = props => {\n  _s();\n\n  const [showUnread, setShowUnread] = useState(false);\n  const {\n    user,\n    notifications,\n    updateReadStatusAPI,\n    setNotificationSocket\n  } = props;\n  const {\n    i18n\n  } = useTranslation();\n  useEffect(() => {\n    user.socket.on(\"order-accepted\", notification => {\n      setNotificationSocket(notification);\n    });\n  });\n\n  const renderNotificationImage = notification => {\n    switch (notification.type) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"notification-image-icon\",\n          icon: faScroll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"notification-image-icon\",\n          icon: faStore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this);\n\n      case 3:\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"notification-image-icon\",\n          icon: faTag\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this);\n\n      case 4:\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"notification-image-icon\",\n          icon: faEnvelope\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this);\n\n      case 5:\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"notification-image-icon\",\n          icon: faBicycle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"notification-image-icon\",\n          icon: faScroll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  const getDifference = (date1, date2) => {\n    var a = moment([date1.getFullYear(), date1.getMonth(), date1.getDate()]);\n    var b = moment([date2.getFullYear(), date2.getMonth(), date2.getDate()]);\n    return a.from(b);\n  };\n\n  const handleNotification = async id => {\n    const status = await updateReadStatusAPI(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-status-toggle\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notitcation-status-option-1\",\n        style: showUnread ? {} : {\n          backgroundColor: \"black\",\n          color: \"white\"\n        },\n        onClick: () => setShowUnread(false),\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notitcation-status-option-2\",\n        style: showUnread ? {\n          backgroundColor: \"black\",\n          color: \"white\"\n        } : {},\n        onClick: () => setShowUnread(true),\n        children: \"Unread\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-sub-title\",\n      children: \"See all notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-title\",\n      children: \"Earlier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), user.notifications.map((notification, index) => showUnread === true && notification.read_status === true ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-item\",\n      onClick: () => handleNotification(notification.id),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification-image ${notification.read_status && \"notification-read\"}`,\n        style: notification.type === 4 ? {\n          backgroundColor: \"#eab200\"\n        } : {},\n        children: renderNotificationImage(notification)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"notification-main-text\",\n          style: {\n            fontWeight: notification.read_status ? \"unset\" : 700\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: notification.subject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), \" \", notification.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"notification-sub-text\",\n          style: {\n            fontWeight: notification.read_status ? \"unset\" : 700,\n            color: notification.read_status ? \"#000000\" : \"rgb(148, 0, 0)\"\n          },\n          children: getDifference(new Date(notification.create_at.split(\"T\")[0]), new Date())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-unread\",\n        children: !notification.read_status && /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          style: {\n            color: \"#bd0000\"\n          },\n          icon: faDotCircle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotificationPanel, \"ytnj35BkKP1yDHVU3zJCqPwQnG8=\", false, function () {\n  return [useTranslation];\n});\n\n_c = NotificationPanel;\nNotificationPanel.propTypes = {\n  user: PropTypes.object.isRequired,\n  updateReadStatusAPI: PropTypes.func.isRequired,\n  setNotificationSocket: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.UserReducer\n});\n\nexport default withRouter(connect(mapStateToProps, {\n  updateReadStatusAPI,\n  setNotificationSocket\n})(NotificationPanel));\n\nvar _c;\n\n$RefreshReg$(_c, \"NotificationPanel\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/Commons/Overlay/Popup/Panel/NotificationPanel.js"],"names":["Fragment","useEffect","useState","PropTypes","connect","withRouter","useTranslation","FontAwesomeIcon","faScroll","moment","updateReadStatusAPI","faBicycle","faDotCircle","faEnvelope","faStore","faTag","setNotificationSocket","NotificationPanel","props","showUnread","setShowUnread","user","notifications","i18n","socket","on","notification","renderNotificationImage","type","getDifference","date1","date2","a","getFullYear","getMonth","getDate","b","from","handleNotification","id","status","backgroundColor","color","map","index","read_status","fontWeight","subject","content","Date","create_at","split","propTypes","object","isRequired","func","mapStateToProps","state","UserReducer"],"mappings":"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","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport \"style/Common.scss\";\nimport { useTranslation } from \"react-i18next\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faScroll } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./NotificationPanel.scss\";\nimport moment from \"moment\";\nimport { updateReadStatusAPI } from \"store/actions/OrderAction/OrderAction\";\nimport {\n  faBicycle,\n  faDotCircle,\n  faEnvelope,\n  faStore,\n  faTag,\n} from \"@fortawesome/fontawesome-free-solid\";\nimport { setNotificationSocket } from \"store/actions/UserAction/UserAction\";\n\nconst NotificationPanel = (props) => {\n  const [showUnread, setShowUnread] = useState(false);\n  const { user, notifications, updateReadStatusAPI, setNotificationSocket } =\n    props;\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    user.socket.on(\"order-accepted\", (notification) => {\n      setNotificationSocket(notification);\n    });\n  });\n  const renderNotificationImage = (notification) => {\n    switch (notification.type) {\n      case 1:\n        return (\n          <FontAwesomeIcon\n            className=\"notification-image-icon\"\n            icon={faScroll}\n          />\n        );\n      case 2:\n        return (\n          <FontAwesomeIcon className=\"notification-image-icon\" icon={faStore} />\n        );\n      case 3:\n        return (\n          <FontAwesomeIcon className=\"notification-image-icon\" icon={faTag} />\n        );\n      case 4:\n        return (\n          <FontAwesomeIcon\n            className=\"notification-image-icon\"\n            icon={faEnvelope}\n          />\n        );\n      case 5:\n        return (\n          <FontAwesomeIcon\n            className=\"notification-image-icon\"\n            icon={faBicycle}\n          />\n        );\n      default:\n        return (\n          <FontAwesomeIcon\n            className=\"notification-image-icon\"\n            icon={faScroll}\n          />\n        );\n    }\n  };\n  const getDifference = (date1, date2) => {\n    var a = moment([date1.getFullYear(), date1.getMonth(), date1.getDate()]);\n    var b = moment([date2.getFullYear(), date2.getMonth(), date2.getDate()]);\n    return a.from(b);\n  };\n  const handleNotification = async (id) => {\n    const status = await updateReadStatusAPI(id);\n  };\n  return (\n    <div className=\"notification-panel\">\n      <div className=\"notification-status-toggle\">\n        <div\n          className=\"notitcation-status-option-1\"\n          style={showUnread ? {} : { backgroundColor: \"black\", color: \"white\" }}\n          onClick={() => setShowUnread(false)}\n        >\n          All\n        </div>\n        <div\n          className=\"notitcation-status-option-2\"\n          style={showUnread ? { backgroundColor: \"black\", color: \"white\" } : {}}\n          onClick={() => setShowUnread(true)}\n        >\n          Unread\n        </div>\n      </div>\n      <div className=\"notification-sub-title\">See all notifications</div>\n      <div className=\"notification-title\">Earlier</div>\n      {user.notifications.map((notification, index) =>\n        showUnread === true && notification.read_status === true ? (\n          <></>\n        ) : (\n          <div\n            className=\"notification-item\"\n            key={index}\n            onClick={() => handleNotification(notification.id)}\n          >\n            <div\n              className={`notification-image ${\n                notification.read_status && \"notification-read\"\n              }`}\n              style={\n                notification.type === 4 ? { backgroundColor: \"#eab200\" } : {}\n              }\n            >\n              {renderNotificationImage(notification)}\n            </div>\n            <div className=\"notification-content\">\n              <span\n                className=\"notification-main-text\"\n                style={{ fontWeight: notification.read_status ? \"unset\" : 700 }}\n              >\n                <b>{notification.subject}</b> {notification.content}\n              </span>\n              <span\n                className=\"notification-sub-text\"\n                style={{\n                  fontWeight: notification.read_status ? \"unset\" : 700,\n                  color: notification.read_status\n                    ? \"#000000\"\n                    : \"rgb(148, 0, 0)\",\n                }}\n              >\n                {getDifference(\n                  new Date(notification.create_at.split(\"T\")[0]),\n                  new Date()\n                )}\n              </span>\n            </div>\n            <div className=\"notification-unread\">\n              {!notification.read_status && (\n                <FontAwesomeIcon\n                  style={{ color: \"#bd0000\" }}\n                  icon={faDotCircle}\n                />\n              )}\n            </div>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nNotificationPanel.propTypes = {\n  user: PropTypes.object.isRequired,\n  updateReadStatusAPI: PropTypes.func.isRequired,\n  setNotificationSocket: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.UserReducer,\n});\n\nexport default withRouter(\n  connect(mapStateToProps, { updateReadStatusAPI, setNotificationSocket })(\n    NotificationPanel\n  )\n);\n"]},"metadata":{},"sourceType":"module"}