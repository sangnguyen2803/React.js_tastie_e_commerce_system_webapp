{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/OrderCheckout/OrderDetail/ScheduleOrder.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport \"./ScheduleOrder.scss\";\nimport Button from \"components/Commons/Button/Button\";\nimport ButtonGroup from \"components/Commons/Button/ButtonGroup/ButtonGroup\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getProviderScheduleTime } from \"store/actions/OrderAction/OrderAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ScheduleOrder(props) {\n  _s();\n\n  const {\n    user,\n    getProviderScheduleTime\n  } = props;\n  const [schedule, setSchedule] = useState([]);\n  const [scheduleDate, setScheduleDate] = useState([]);\n  const [scheduleTime, setScheduleTime] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    var _user$userCart;\n\n    async function fetchScheduleDateTime(id) {\n      var _result$, _result$2;\n\n      const result = await getProviderScheduleTime(id);\n      console.log(result);\n      if (result) setSchedule(result);\n      setScheduleDate((_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.day);\n      setScheduleTime((_result$2 = result[0]) === null || _result$2 === void 0 ? void 0 : _result$2.schedule_time[0]);\n    }\n\n    fetchScheduleDateTime(user === null || user === void 0 ? void 0 : (_user$userCart = user.userCart) === null || _user$userCart === void 0 ? void 0 : _user$userCart.provider_id);\n  }, []);\n\n  const submitScheduleTime = () => {\n    var dateFormatted = `${scheduleDate} ${scheduleTime}`;\n    /*\n    var dateFormatted = `${pickedDay.getFullYear()}-${(\n      \"0\" +\n      (pickedDay.getMonth() + 1)\n    ).slice(-2)}-${(\"0\" + pickedDay.getDate()).slice(-2)} ${scheduleTime}`;\n    const sameDate = pickedDay.getDate() === current.getDate();\n    if (sameDate) {\n      var startTime = scheduleTime?.split(\" - \")[0];\n      var currentTime = `${current.getHours()}:${current.getMinutes()}`;\n       if (\n        startTime.split(\":\")[0] < current.getHours &&\n        startTime.split(\":\")[1] < current.getMinutes\n      ) {\n        setErrorMessage(\n          \"Picked schedule time cannot be lesser or equal to the current date time\"\n        );\n        return;\n      }\n    } else setErrorMessage(\"\");\n    const scheduleOnFormat = `${pickedDay.getFullYear()}-${pickedDay.getMonth()}-${pickedDay.getDate()} ${scheduleTime?.replace(\n      /\\s/g,\n      \"\"\n    )}`;\n    */\n\n    props.setOrderScheduleTime(dateFormatted);\n    props.closeModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"schedule-order-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sch-o-head-text\",\n        children: \"Pick a time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sch-o-dropdown-date-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sch-o-select-label\",\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"sch-o-select-container\",\n          onChange: e => {\n            setScheduleDate(e.target.value);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            hidden: true,\n            children: \"Select a date...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), schedule.map(sch => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: sch.day,\n            children: sch.day\n          }, sch.day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sch-o-dropdown-date-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sch-o-select-label\",\n          children: \"Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"sch-o-select-container\",\n          disabled: !scheduleDate,\n          onChange: e => setScheduleTime(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            hidden: true,\n            children: \"Select a time...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), schedule.filter(sch => sch.day === scheduleDate).map(time => {\n            var _time$schedule_time;\n\n            return time === null || time === void 0 ? void 0 : (_time$schedule_time = time.schedule_time) === null || _time$schedule_time === void 0 ? void 0 : _time$schedule_time.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t,\n              children: t\n            }, t, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this));\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"validate-schedule-time\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        width: 90,\n        float: \"flex-end\",\n        mgTop: 20,\n        gap: 30,\n        mgBottom: 10,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"white\",\n          bgColor: \"black\",\n          justifyContent: \"center\",\n          gap: \"10px\",\n          width: 100,\n          fontSize: 13,\n          height: 30,\n          label: \"Schedule\",\n          onClick: () => submitScheduleTime()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ScheduleOrder, \"AMGmFp+YcinGth94CSDQg9+sGU4=\");\n\n_c = ScheduleOrder;\nScheduleOrder.propTypes = {\n  user: PropTypes.object.isRequired,\n  getProviderScheduleTime: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.UserReducer\n});\n\nexport default withRouter(connect(mapStateToProps, {\n  getProviderScheduleTime\n})(ScheduleOrder));\n/*\nconst SCHEDULE_DATE = 10;\nconst SCHEDULE_TIME = 48;\nconst day = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\nconst month = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n*/\n\n/*useEffect(() => {\n    let scheduleDate = [];\n    let scheduleTime = [];\n    for (let i = 0; i < SCHEDULE_DATE; i++) {\n      var current = new Date();\n      current.setDate(new Date().getDate() + i);\n      scheduleDate.push(\n        `${i === 0 ? \"Today, \" : \"\"}${day[current.getDay()]}, ${\n          month[current.getMonth()]\n        } ${current.getDate()}`\n      );\n    }\n    setScheduleDate(scheduleDate);\n    for (let i = 1; i < SCHEDULE_TIME; i++) {\n      let time1 = `${(\"0\" + current.getHours()).slice(-2)}:${(\n        \"0\" + current.getMinutes()\n      ).slice(-2)} ${current.getHours >= 12 ? \"PM\" : \"AM\"}`;\n      var current = new Date();\n      current.setTime(i * 1800000);\n      let time2 = `${(\"0\" + current.getHours()).slice(-2)}:${(\n        \"0\" + current.getMinutes()\n      ).slice(-2)} ${current.getHours >= 12 ? \"PM\" : \"AM\"}`;\n      scheduleTime.push(time1 + \" - \" + time2);\n    }\n    setScheduleTime(scheduleTime);\n  }, []);*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ScheduleOrder\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/OrderCheckout/OrderDetail/ScheduleOrder.js"],"names":["React","Fragment","useState","useEffect","Button","ButtonGroup","withRouter","connect","PropTypes","getProviderScheduleTime","ScheduleOrder","props","user","schedule","setSchedule","scheduleDate","setScheduleDate","scheduleTime","setScheduleTime","errorMessage","setErrorMessage","fetchScheduleDateTime","id","result","console","log","day","schedule_time","userCart","provider_id","submitScheduleTime","dateFormatted","setOrderScheduleTime","closeModal","e","target","value","map","sch","filter","time","t","propTypes","object","isRequired","func","mapStateToProps","state","UserReducer"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport \"./ScheduleOrder.scss\";\nimport Button from \"components/Commons/Button/Button\";\nimport ButtonGroup from \"components/Commons/Button/ButtonGroup/ButtonGroup\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { getProviderScheduleTime } from \"store/actions/OrderAction/OrderAction\";\n\nfunction ScheduleOrder(props) {\n  const { user, getProviderScheduleTime } = props;\n  const [schedule, setSchedule] = useState([]);\n  const [scheduleDate, setScheduleDate] = useState([]);\n  const [scheduleTime, setScheduleTime] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchScheduleDateTime(id) {\n      const result = await getProviderScheduleTime(id);\n      console.log(result);\n      if (result) setSchedule(result);\n      setScheduleDate(result[0]?.day);\n      setScheduleTime(result[0]?.schedule_time[0]);\n    }\n    fetchScheduleDateTime(user?.userCart?.provider_id);\n  }, []);\n\n  const submitScheduleTime = () => {\n    var dateFormatted = `${scheduleDate} ${scheduleTime}`;\n    /*\n    var dateFormatted = `${pickedDay.getFullYear()}-${(\n      \"0\" +\n      (pickedDay.getMonth() + 1)\n    ).slice(-2)}-${(\"0\" + pickedDay.getDate()).slice(-2)} ${scheduleTime}`;\n    const sameDate = pickedDay.getDate() === current.getDate();\n    if (sameDate) {\n      var startTime = scheduleTime?.split(\" - \")[0];\n      var currentTime = `${current.getHours()}:${current.getMinutes()}`;\n\n      if (\n        startTime.split(\":\")[0] < current.getHours &&\n        startTime.split(\":\")[1] < current.getMinutes\n      ) {\n        setErrorMessage(\n          \"Picked schedule time cannot be lesser or equal to the current date time\"\n        );\n        return;\n      }\n    } else setErrorMessage(\"\");\n    const scheduleOnFormat = `${pickedDay.getFullYear()}-${pickedDay.getMonth()}-${pickedDay.getDate()} ${scheduleTime?.replace(\n      /\\s/g,\n      \"\"\n    )}`;\n    */\n    props.setOrderScheduleTime(dateFormatted);\n    props.closeModal();\n  };\n  return (\n    <Fragment>\n      <div className=\"schedule-order-container\">\n        <span className=\"sch-o-head-text\">Pick a time</span>\n        <div className=\"sch-o-dropdown-date-container\">\n          <div className=\"sch-o-select-label\">Date:</div>\n          <select\n            className=\"sch-o-select-container\"\n            onChange={(e) => {\n              setScheduleDate(e.target.value);\n            }}\n          >\n            <option value=\"\" disabled hidden>\n              Select a date...\n            </option>\n            {schedule.map((sch) => (\n              <option key={sch.day} value={sch.day}>\n                {sch.day}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"sch-o-dropdown-date-container\">\n          <div className=\"sch-o-select-label\">Time:</div>\n          <select\n            className=\"sch-o-select-container\"\n            disabled={!scheduleDate}\n            onChange={(e) => setScheduleTime(e.target.value)}\n          >\n            <option value=\"\" disabled hidden>\n              Select a time...\n            </option>\n            {schedule\n              .filter((sch) => sch.day === scheduleDate)\n              .map((time) =>\n                time?.schedule_time?.map((t) => (\n                  <option key={t} value={t}>\n                    {t}\n                  </option>\n                ))\n              )}\n          </select>\n        </div>\n        <span className=\"validate-schedule-time\">{errorMessage}</span>\n        <ButtonGroup\n          width={90}\n          float={\"flex-end\"}\n          mgTop={20}\n          gap={30}\n          mgBottom={10}\n        >\n          <Button\n            color={\"white\"}\n            bgColor={\"black\"}\n            justifyContent={\"center\"}\n            gap={\"10px\"}\n            width={100}\n            fontSize={13}\n            height={30}\n            label={\"Schedule\"}\n            onClick={() => submitScheduleTime()}\n          />\n        </ButtonGroup>\n      </div>\n    </Fragment>\n  );\n}\n\nScheduleOrder.propTypes = {\n  user: PropTypes.object.isRequired,\n  getProviderScheduleTime: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.UserReducer,\n});\nexport default withRouter(\n  connect(mapStateToProps, { getProviderScheduleTime })(ScheduleOrder)\n);\n/*\nconst SCHEDULE_DATE = 10;\nconst SCHEDULE_TIME = 48;\nconst day = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\nconst month = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n*/\n/*useEffect(() => {\n    let scheduleDate = [];\n    let scheduleTime = [];\n    for (let i = 0; i < SCHEDULE_DATE; i++) {\n      var current = new Date();\n      current.setDate(new Date().getDate() + i);\n      scheduleDate.push(\n        `${i === 0 ? \"Today, \" : \"\"}${day[current.getDay()]}, ${\n          month[current.getMonth()]\n        } ${current.getDate()}`\n      );\n    }\n    setScheduleDate(scheduleDate);\n    for (let i = 1; i < SCHEDULE_TIME; i++) {\n      let time1 = `${(\"0\" + current.getHours()).slice(-2)}:${(\n        \"0\" + current.getMinutes()\n      ).slice(-2)} ${current.getHours >= 12 ? \"PM\" : \"AM\"}`;\n      var current = new Date();\n      current.setTime(i * 1800000);\n      let time2 = `${(\"0\" + current.getHours()).slice(-2)}:${(\n        \"0\" + current.getMinutes()\n      ).slice(-2)} ${current.getHours >= 12 ? \"PM\" : \"AM\"}`;\n      scheduleTime.push(time1 + \" - \" + time2);\n    }\n    setScheduleTime(scheduleTime);\n  }, []);*/\n"]},"metadata":{},"sourceType":"module"}