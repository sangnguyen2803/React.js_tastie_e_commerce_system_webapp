{"ast":null,"code":"import { PureComponent as o } from \"react\";\nimport e from \"prop-types\";\nimport n from \"@mapbox/mapbox-gl-geocoder\";\nimport { FlyToInterpolator as r } from \"react-map-gl\";\nimport t from \"viewport-mercator-project\";\nimport l from \"mapbox-gl\";\n\nvar c = [\"top-left\", \"top-right\", \"bottom-left\", \"bottom-right\"],\n    i = function (o) {\n  var e, i;\n\n  function a() {\n    for (var e, i = arguments.length, a = new Array(i), u = 0; u < i; u++) a[u] = arguments[u];\n\n    return (e = o.call.apply(o, [this].concat(a)) || this).geocoder = null, e.cachedResult = null, e.initializeGeocoder = function () {\n      var o = e.getMapboxMap(),\n          r = e.getContainerNode(),\n          t = e.props,\n          i = t.inputValue,\n          a = t.render,\n          u = t.getItemValue,\n          s = t.onInit,\n          d = t.position,\n          p = {\n        accessToken: t.mapboxApiAccessToken,\n        origin: t.origin,\n        zoom: t.zoom,\n        flyTo: !1,\n        placeholder: t.placeholder,\n        proximity: t.proximity,\n        trackProximity: t.trackProximity,\n        collapsed: t.collapsed,\n        clearAndBlurOnEsc: t.clearAndBlurOnEsc,\n        clearOnBlur: t.clearOnBlur,\n        bbox: t.bbox,\n        types: t.types,\n        countries: t.countries,\n        minLength: t.minLength,\n        limit: t.limit,\n        language: t.language,\n        filter: t.filter,\n        localGeocoder: t.localGeocoder,\n        localGeocoderOnly: t.localGeocoderOnly,\n        reverseGeocode: t.reverseGeocode,\n        enableEventLogging: t.enableEventLogging,\n        marker: t.marker,\n        mapboxgl: l\n      };\n      a && \"function\" == typeof a && (p.render = a), u && \"function\" == typeof u && (p.getItemValue = u), e.geocoder = new n(p), e.subscribeEvents(), r ? r.appendChild(e.geocoder.onAdd(o)) : o.addControl(e.geocoder, c.find(function (o) {\n        return d === o;\n      })), null != i ? e.geocoder.setInput(i) : e.cachedResult && e.geocoder.setInput(e.cachedResult.place_name), (e.cachedResult || null != i) && e.showClearIcon(), s(e.geocoder);\n    }, e.showClearIcon = function () {\n      e.geocoder._clearEl.style.display = \"block\";\n    }, e.getMapboxMap = function () {\n      var o = e.props.mapRef;\n      return o && o.current && o.current.getMap() || null;\n    }, e.getContainerNode = function () {\n      var o = e.props.containerRef;\n      return o && o.current || null;\n    }, e.subscribeEvents = function () {\n      e.geocoder.on(\"clear\", e.handleClear), e.geocoder.on(\"loading\", e.handleLoading), e.geocoder.on(\"results\", e.handleResults), e.geocoder.on(\"result\", e.handleResult), e.geocoder.on(\"error\", e.handleError);\n    }, e.unsubscribeEvents = function () {\n      e.geocoder.off(\"clear\", e.handleClear), e.geocoder.off(\"loading\", e.handleLoading), e.geocoder.off(\"results\", e.handleResults), e.geocoder.off(\"result\", e.handleResult), e.geocoder.off(\"error\", e.handleError);\n    }, e.removeGeocoder = function () {\n      var o = e.getMapboxMap();\n      e.unsubscribeEvents(), o && o.removeControl && e.getMapboxMap().removeControl(e.geocoder), e.geocoder = null;\n    }, e.handleClear = function () {\n      e.cachedResult = null, e.props.onClear();\n    }, e.handleLoading = function (o) {\n      e.props.onLoading(o);\n    }, e.handleResults = function (o) {\n      e.props.onResults(o);\n    }, e.handleResult = function (o) {\n      var n = o.result,\n          l = e.props,\n          c = l.onViewportChange,\n          i = l.onResult,\n          a = n.bbox,\n          u = n.center,\n          s = n.properties,\n          d = (void 0 === s ? {} : s).short_code,\n          p = u[0],\n          g = u[1],\n          f = {\n        fr: {\n          name: \"France\",\n          bbox: [[-4.59235, 41.380007], [9.560016, 51.148506]]\n        },\n        us: {\n          name: \"United States\",\n          bbox: [[-171.791111, 18.91619], [-66.96466, 71.357764]]\n        },\n        ru: {\n          name: \"Russia\",\n          bbox: [[19.66064, 41.151416], [190.10042, 81.2504]]\n        },\n        ca: {\n          name: \"Canada\",\n          bbox: [[-140.99778, 41.675105], [-52.648099, 83.23324]]\n        }\n      },\n          m = e.getMapboxMap().getContainer().getBoundingClientRect(),\n          b = m.width,\n          h = m.height,\n          y = e.geocoder.options.zoom,\n          x = function (o, e) {\n        return new t(e).fitBounds(o);\n      };\n\n      try {\n        !f[d] && a ? y = x([[a[0], a[1]], [a[2], a[3]]], {\n          width: b,\n          height: h\n        }).zoom : f[d] && (y = x(f[d].bbox, {\n          width: b,\n          height: h\n        }).zoom);\n      } catch (o) {\n        console.warn(\"following result caused an error when trying to zoom to bbox: \", n), y = e.geocoder.options.zoom;\n      }\n\n      c({\n        longitude: p,\n        latitude: g,\n        zoom: y,\n        transitionInterpolator: new r(),\n        transitionDuration: 3e3\n      }), i(o), e.cachedResult = n, e.geocoder._typeahead.selected = null, e.showClearIcon();\n    }, e.handleError = function (o) {\n      e.props.onError(o);\n    }, e;\n  }\n\n  i = o, (e = a).prototype = Object.create(i.prototype), e.prototype.constructor = e, e.__proto__ = i;\n  var u = a.prototype;\n  return u.componentDidMount = function () {\n    this.initializeGeocoder();\n  }, u.componentWillUnmount = function () {\n    this.removeGeocoder();\n  }, u.componentDidUpdate = function () {\n    this.removeGeocoder(), this.initializeGeocoder();\n  }, u.getGeocoder = function () {\n    return this.geocoder;\n  }, u.render = function () {\n    return null;\n  }, a;\n}(o);\n\ni.propTypes = {\n  mapRef: e.object.isRequired,\n  containerRef: e.object,\n  onViewportChange: e.func,\n  mapboxApiAccessToken: e.string.isRequired,\n  inputValue: e.string,\n  origin: e.string,\n  zoom: e.number,\n  placeholder: e.string,\n  proximity: e.object,\n  trackProximity: e.bool,\n  collapsed: e.bool,\n  clearAndBlurOnEsc: e.bool,\n  clearOnBlur: e.bool,\n  bbox: e.array,\n  types: e.string,\n  countries: e.string,\n  minLength: e.number,\n  limit: e.number,\n  language: e.string,\n  filter: e.func,\n  localGeocoder: e.func,\n  localGeocoderOnly: e.bool,\n  reverseGeocode: e.bool,\n  enableEventLogging: e.bool,\n  marker: e.oneOfType([e.bool, e.object]),\n  render: e.func,\n  getItemValue: e.func,\n  position: e.oneOf(c),\n  onInit: e.func,\n  onClear: e.func,\n  onLoading: e.func,\n  onResults: e.func,\n  onResult: e.func,\n  onError: e.func\n}, i.defaultProps = {\n  onViewportChange: function () {},\n  origin: \"https://api.mapbox.com\",\n  zoom: 16,\n  placeholder: \"Search\",\n  trackProximity: !1,\n  collapsed: !1,\n  clearAndBlurOnEsc: !1,\n  clearOnBlur: !1,\n  minLength: 2,\n  limit: 5,\n  reverseGeocode: !1,\n  enableEventLogging: !0,\n  marker: !0,\n  position: \"top-right\",\n  onInit: function () {},\n  onClear: function () {},\n  onLoading: function () {},\n  onResults: function () {},\n  onResult: function () {},\n  onError: function () {}\n};\nexport default i;","map":{"version":3,"sources":["../src/index.js"],"names":["VALID_POSITIONS","Geocoder","PureComponent","geocoder","cachedResult","componentDidMount","this","initializeGeocoder","componentWillUnmount","removeGeocoder","componentDidUpdate","mapboxMap","_this","getMapboxMap","containerNode","getContainerNode","mapboxApiAccessToken","inputValue","origin","zoom","placeholder","proximity","trackProximity","collapsed","clearAndBlurOnEsc","clearOnBlur","bbox","types","countries","minLength","limit","language","filter","localGeocoder","localGeocoderOnly","reverseGeocode","enableEventLogging","marker","render","getItemValue","onInit","position","props","options","accessToken","flyTo","mapboxgl","MapboxGeocoder","subscribeEvents","appendChild","onAdd","addControl","find","_position","setInput","place_name","showClearIcon","_clearEl","style","display","mapRef","current","getMap","containerRef","on","handleClear","handleLoading","handleResults","handleResult","handleError","unsubscribeEvents","off","removeControl","onClear","event","onLoading","onResults","result","onViewportChange","onResult","center","properties","short_code","longitude","latitude","bboxExceptions","fr","name","us","ru","ca","width","height","getContainer","getBoundingClientRect","fitBounds","bounds","viewport","WebMercatorViewport","e","console","warn","transitionInterpolator","FlyToInterpolator","transitionDuration","_typeahead","selected","onError","getGeocoder","propTypes","PropTypes","object","isRequired","func","string","number","bool","array","oneOfType","oneOf","defaultProps"],"mappings":";;;;;;;AAOA,IAAMA,CAAAA,GAAkB,CAAC,UAAD,EAAa,WAAb,EAA0B,aAA1B,EAAyC,cAAzC,CAAxB;AAAA,IAEMC,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAAAA,MAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,WAAAA,CAAAA,GAAAA;AAAAA,SAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,KAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,WAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAAA,EACJE,QADIF,GACO,IADPA,EACO,CAAA,CACXG,YADW,GACI,IAFXH,EAEW,CAAA,CAefM,kBAfe,GAeM,YAAA;AACnB,UAAMI,CAAAA,GAAYC,CAAAA,CAAKC,YAALD,EAAlB;AAAA,UACME,CAAAA,GAAgBF,CAAAA,CAAKG,gBAALH,EADtB;AAAA,UAC2BG,CAAAA,GA4BvBH,CAAAA,CAAK8B,KA7BT;AAAA,UAIEzB,CAAAA,GAAAA,CAAAA,CAAAA,UAJF;AAAA,UAyBEqB,CAAAA,GAAAA,CAAAA,CAAAA,MAzBF;AAAA,UA0BEC,CAAAA,GAAAA,CAAAA,CAAAA,YA1BF;AAAA,UA2BEC,CAAAA,GAAAA,CAAAA,CAAAA,MA3BF;AAAA,UA4BEC,CAAAA,GAAAA,CAAAA,CAAAA,QA5BF;AAAA,UA8BME,CAAAA,GAAU;AACdC,QAAAA,WAAAA,EAAAA,CAAAA,CA5BA5B,oBA2Bc;AAEdE,QAAAA,MAAAA,EAAAA,CAAAA,CA3BAA,MAyBc;AAGdC,QAAAA,IAAAA,EAAAA,CAAAA,CA3BAA,IAwBc;AAId0B,QAAAA,KAAAA,EAAAA,CAAO,CAJO;AAKdzB,QAAAA,WAAAA,EAAAA,CAAAA,CA5BAA,WAuBc;AAMdC,QAAAA,SAAAA,EAAAA,CAAAA,CA5BAA,SAsBc;AAOdC,QAAAA,cAAAA,EAAAA,CAAAA,CA5BAA,cAqBc;AAQdC,QAAAA,SAAAA,EAAAA,CAAAA,CA5BAA,SAoBc;AASdC,QAAAA,iBAAAA,EAAAA,CAAAA,CA5BAA,iBAmBc;AAUdC,QAAAA,WAAAA,EAAAA,CAAAA,CA5BAA,WAkBc;AAWdC,QAAAA,IAAAA,EAAAA,CAAAA,CA5BAA,IAiBc;AAYdC,QAAAA,KAAAA,EAAAA,CAAAA,CA5BAA,KAgBc;AAadC,QAAAA,SAAAA,EAAAA,CAAAA,CA5BAA,SAec;AAcdC,QAAAA,SAAAA,EAAAA,CAAAA,CA5BAA,SAcc;AAedC,QAAAA,KAAAA,EAAAA,CAAAA,CA5BAA,KAac;AAgBdC,QAAAA,QAAAA,EAAAA,CAAAA,CA5BAA,QAYc;AAiBdC,QAAAA,MAAAA,EAAAA,CAAAA,CA5BAA,MAWc;AAkBdC,QAAAA,aAAAA,EAAAA,CAAAA,CA5BAA,aAUc;AAmBdC,QAAAA,iBAAAA,EAAAA,CAAAA,CA5BAA,iBASc;AAoBdC,QAAAA,cAAAA,EAAAA,CAAAA,CA5BAA,cAQc;AAqBdC,QAAAA,kBAAAA,EAAAA,CAAAA,CA5BAA,kBAOc;AAsBdC,QAAAA,MAAAA,EAAAA,CAAAA,CA5BAA,MAMc;AAuBdS,QAAAA,QAAAA,EAAAA;AAvBc,OA9BhB;AAwDIR,MAAAA,CAAAA,IAA4B,cAAA,OAAXA,CAAjBA,KACFK,CAAAA,CAAQL,MAARK,GAAiBL,CADfA,GAIAC,CAAAA,IAAwC,cAAA,OAAjBA,CAAvBA,KACFI,CAAAA,CAAQJ,YAARI,GAAuBJ,CADrBA,CAJAD,EAQJ1B,CAAAA,CAAKT,QAALS,GAAgB,IAAImC,CAAJ,CAAmBJ,CAAnB,CARZL,EASJ1B,CAAAA,CAAKoC,eAALpC,EATI0B,EAWAxB,CAAAA,GACFA,CAAAA,CAAcmC,WAAdnC,CAA0BF,CAAAA,CAAKT,QAALS,CAAcsC,KAAdtC,CAAoBD,CAApBC,CAA1BE,CADEA,GAGFH,CAAAA,CAAUwC,UAAVxC,CAAqBC,CAAAA,CAAKT,QAA1BQ,EAAoCX,CAAAA,CAAgBoD,IAAhBpD,CAAqB,UAACqD,CAAD,EAACA;AAAAA,eAAcZ,CAAAA,KAAaY,CAA3BA;AAA2BA,OAAjDrD,CAApCW,CAdE2B,EAiBArB,QAAAA,CAAAA,GACFL,CAAAA,CAAKT,QAALS,CAAc0C,QAAd1C,CAAuBK,CAAvBL,CADEK,GAEOL,CAAAA,CAAKR,YAALQ,IACTA,CAAAA,CAAKT,QAALS,CAAc0C,QAAd1C,CAAuBA,CAAAA,CAAKR,YAALQ,CAAkB2C,UAAzC3C,CApBE0B,EAoBuCiB,CAGvC3C,CAAAA,CAAKR,YAALQ,IAAsBK,QAAAA,CAHiBsC,KAIzC3C,CAAAA,CAAK4C,aAAL5C,EAxBE0B,EA2BJE,CAAAA,CAAO5B,CAAAA,CAAKT,QAAZqC,CA3BIF;AA2BQnC,KArGVF,EAqGUE,CAAAA,CAGdqD,aAHcrD,GAGE,YAAA;AAEdS,MAAAA,CAAAA,CAAKT,QAALS,CAAc6C,QAAd7C,CAAuB8C,KAAvB9C,CAA6B+C,OAA7B/C,GAAuC,OAAvCA;AAAuC,KA1GrCX,EA0GqC,CAAA,CAGzCY,YAHyC,GAG1B,YAAA;AAAA,UACL+C,CAAAA,GAAWhD,CAAAA,CAAK8B,KAAL9B,CAAXgD,MADK;AAGb,aAAQA,CAAAA,IAAUA,CAAAA,CAAOC,OAAjBD,IAA4BA,CAAAA,CAAOC,OAAPD,CAAeE,MAAfF,EAA5BA,IAAwD,IAAhE;AAAgE,KAhH9D3D,EAgH8D,CAAA,CAGlEc,gBAHkE,GAG/C,YAAA;AAAA,UACTgD,CAAAA,GAAiBnD,CAAAA,CAAK8B,KAAL9B,CAAjBmD,YADS;AAGjB,aAAQA,CAAAA,IAAgBA,CAAAA,CAAaF,OAA7BE,IAAyC,IAAjD;AAAiD,KAtH/C9D,EAsH+C,CAAA,CAGnD+C,eAHmD,GAGjC,YAAA;AAChBpC,MAAAA,CAAAA,CAAKT,QAALS,CAAcoD,EAAdpD,CAAiB,OAAjBA,EAA0BA,CAAAA,CAAKqD,WAA/BrD,GACAA,CAAAA,CAAKT,QAALS,CAAcoD,EAAdpD,CAAiB,SAAjBA,EAA4BA,CAAAA,CAAKsD,aAAjCtD,CADAA,EAEAA,CAAAA,CAAKT,QAALS,CAAcoD,EAAdpD,CAAiB,SAAjBA,EAA4BA,CAAAA,CAAKuD,aAAjCvD,CAFAA,EAGAA,CAAAA,CAAKT,QAALS,CAAcoD,EAAdpD,CAAiB,QAAjBA,EAA2BA,CAAAA,CAAKwD,YAAhCxD,CAHAA,EAIAA,CAAAA,CAAKT,QAALS,CAAcoD,EAAdpD,CAAiB,OAAjBA,EAA0BA,CAAAA,CAAKyD,WAA/BzD,CAJAA;AAI+ByD,KA9H7BpE,EA8H6BoE,CAAAA,CAGjCC,iBAHiCD,GAGb,YAAA;AAClBzD,MAAAA,CAAAA,CAAKT,QAALS,CAAc2D,GAAd3D,CAAkB,OAAlBA,EAA2BA,CAAAA,CAAKqD,WAAhCrD,GACAA,CAAAA,CAAKT,QAALS,CAAc2D,GAAd3D,CAAkB,SAAlBA,EAA6BA,CAAAA,CAAKsD,aAAlCtD,CADAA,EAEAA,CAAAA,CAAKT,QAALS,CAAc2D,GAAd3D,CAAkB,SAAlBA,EAA6BA,CAAAA,CAAKuD,aAAlCvD,CAFAA,EAGAA,CAAAA,CAAKT,QAALS,CAAc2D,GAAd3D,CAAkB,QAAlBA,EAA4BA,CAAAA,CAAKwD,YAAjCxD,CAHAA,EAIAA,CAAAA,CAAKT,QAALS,CAAc2D,GAAd3D,CAAkB,OAAlBA,EAA2BA,CAAAA,CAAKyD,WAAhCzD,CAJAA;AAIgCyD,KAtI9BpE,EAsI8BoE,CAAAA,CAGlC5D,cAHkC4D,GAGjB,YAAA;AACf,UAAM1D,CAAAA,GAAYC,CAAAA,CAAKC,YAALD,EAAlB;AAEAA,MAAAA,CAAAA,CAAK0D,iBAAL1D,IAEID,CAAAA,IAAaA,CAAAA,CAAU6D,aAAvB7D,IACFC,CAAAA,CAAKC,YAALD,GAAoB4D,aAApB5D,CAAkCA,CAAAA,CAAKT,QAAvCS,CAHFA,EAMAA,CAAAA,CAAKT,QAALS,GAAgB,IANhBA;AAMgB,KAlJdX,EAkJc,CAAA,CAGlBgE,WAHkB,GAGJ,YAAA;AACZrD,MAAAA,CAAAA,CAAKR,YAALQ,GAAoB,IAApBA,EACAA,CAAAA,CAAK8B,KAAL9B,CAAW6D,OAAX7D,EADAA;AACW6D,KAvJTxE,EAuJSwE,CAAAA,CAGbP,aAHaO,GAGG,UAACC,CAAD,EAACA;AACf9D,MAAAA,CAAAA,CAAK8B,KAAL9B,CAAW+D,SAAX/D,CAAqB8D,CAArB9D;AAAqB8D,KA3JnBzE,EA2JmByE,CAAAA,CAGvBP,aAHuBO,GAGP,UAACA,CAAD,EAACA;AACf9D,MAAAA,CAAAA,CAAK8B,KAAL9B,CAAWgE,SAAXhE,CAAqB8D,CAArB9D;AAAqB8D,KA/JnBzE,EA+JmByE,CAAAA,CAGvBN,YAHuBM,GAGR,UAACA,CAAD,EAACA;AAAAA,UACNG,CAAAA,GAAWH,CAAAA,CAAXG,MADMH;AAAAA,UACNG,CAAAA,GAC+BjE,CAAAA,CAAK8B,KAF9BgC;AAAAA,UAENI,CAAAA,GAAAA,CAAAA,CAAAA,gBAFMJ;AAAAA,UAEYK,CAAAA,GAAAA,CAAAA,CAAAA,QAFZL;AAAAA,UAGNhD,CAAAA,GAAkCmD,CAAAA,CAAlCnD,IAHMgD;AAAAA,UAGAM,CAAAA,GAA4BH,CAAAA,CAA5BG,MAHAN;AAAAA,UAGAM,CAAAA,GAA4BH,CAAAA,CAApBI,UAHRP;AAAAA,UAINQ,CAAAA,GAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAD2B,EAC3BA,GAD2B,CAC3BA,EAAAA,UAJMR;AAAAA,UAKPS,CAAAA,GAAuBH,CAAAA,CAAAA,CAAAA,CALhBN;AAAAA,UAKIU,CAAAA,GAAYJ,CAAAA,CAAAA,CAAAA,CALhBN;AAAAA,UAMRW,CAAAA,GAAiB;AACrBC,QAAAA,EAAAA,EAAI;AACFC,UAAAA,IAAAA,EAAM,QADJ;AAEF7D,UAAAA,IAAAA,EAAM,CAAC,CAAA,CAAE,OAAF,EAAW,SAAX,CAAD,EAAwB,CAAC,QAAD,EAAW,SAAX,CAAxB;AAFJ,SADiB;AAKrB8D,QAAAA,EAAAA,EAAI;AACFD,UAAAA,IAAAA,EAAM,eADJ;AAEF7D,UAAAA,IAAAA,EAAM,CAAC,CAAA,CAAE,UAAF,EAAc,QAAd,CAAD,EAA0B,CAAA,CAAE,QAAF,EAAY,SAAZ,CAA1B;AAFJ,SALiB;AASrB+D,QAAAA,EAAAA,EAAI;AACFF,UAAAA,IAAAA,EAAM,QADJ;AAEF7D,UAAAA,IAAAA,EAAM,CAAC,CAAC,QAAD,EAAW,SAAX,CAAD,EAAwB,CAAC,SAAD,EAAY,OAAZ,CAAxB;AAFJ,SATiB;AAarBgE,QAAAA,EAAAA,EAAI;AACFH,UAAAA,IAAAA,EAAM,QADJ;AAEF7D,UAAAA,IAAAA,EAAM,CAAC,CAAA,CAAE,SAAF,EAAa,SAAb,CAAD,EAA0B,CAAA,CAAE,SAAF,EAAa,QAAb,CAA1B;AAFJ;AAbiB,OANTgD;AAAAA,UAqBmC,CAAA,GAGvB9D,CAAAA,CAAKC,YAALD,GACvBiF,YADuBjF,GAEvBkF,qBAFuBlF,EAxBZ8D;AAAAA,UAwBNiB,CAAAA,GAAAA,CAAAA,CAAAA,KAxBMjB;AAAAA,UAwBCkB,CAAAA,GAAAA,CAAAA,CAAAA,MAxBDlB;AAAAA,UA2BVvD,CAAAA,GAAOP,CAAAA,CAAKT,QAALS,CAAc+B,OAAd/B,CAAsBO,IA3BnBuD;AAAAA,UA4BRqB,CAAAA,GAAY,UAACC,CAAD,EAASC,CAAT,EAASA;AAAAA,eAAAA,IAAiBC,CAAjBD,CAAqCA,CAArCA,EAA+CF,SAA/CE,CAAyDD,CAAzDC,CAAAA;AAAyDD,OA5BtEtB;;AA8Bd,UAAA;AAAA,SACOW,CAAAA,CAAeH,CAAfG,CADP,IACqC3D,CADrC,GAEIP,CAAAA,GAAO4E,CAAAA,CAAU,CAAC,CAACrE,CAAAA,CAAK,CAALA,CAAD,EAAUA,CAAAA,CAAK,CAALA,CAAV,CAAD,EAAqB,CAACA,CAAAA,CAAK,CAALA,CAAD,EAAUA,CAAAA,CAAK,CAALA,CAAV,CAArB,CAAVqE,EAAoD;AAAEJ,UAAAA,KAAAA,EAAAA,CAAF;AAASC,UAAAA,MAAAA,EAAAA;AAAT,SAApDG,CAAAA,CAAuE5E,IAFlF,GAGakE,CAAAA,CAAeH,CAAfG,CAAAA,KACTlE,CAAAA,GAAO4E,CAAAA,CAAUV,CAAAA,CAAeH,CAAfG,CAAAA,CAA2B3D,IAArCqE,EAA2C;AAAEJ,UAAAA,KAAAA,EAAAA,CAAF;AAASC,UAAAA,MAAAA,EAAAA;AAAT,SAA3CG,CAAAA,CAA8D5E,IAD5DkE,CAHb;AAME,OANF,CAME,OAAOc,CAAP,EAAOA;AACPC,QAAAA,OAAAA,CAAQC,IAARD,CAAa,gEAAbA,EAA+EvB,CAA/EuB,GACAjF,CAAAA,GAAOP,CAAAA,CAAKT,QAALS,CAAc+B,OAAd/B,CAAsBO,IAD7BiF;AAIFtB;;AAAAA,MAAAA,CAAAA,CAAiB;AACfK,QAAAA,SAAAA,EAAAA,CADe;AAEfC,QAAAA,QAAAA,EAAAA,CAFe;AAGfjE,QAAAA,IAAAA,EAAAA,CAHe;AAIfmF,QAAAA,sBAAAA,EAAwB,IAAIC,CAAJ,EAJT;AAKfC,QAAAA,kBAAAA,EAAoB;AALL,OAAjB1B,CAAAA,EAOAC,CAAAA,CAASL,CAATK,CAPAD,EASAlE,CAAAA,CAAKR,YAALQ,GAAoBiE,CATpBC,EAUAlE,CAAAA,CAAKT,QAALS,CAAc6F,UAAd7F,CAAyB8F,QAAzB9F,GAAoC,IAVpCkE,EAWAlE,CAAAA,CAAK4C,aAAL5C,EAXAkE;AAWKtB,KAtNHvD,EAsNGuD,CAAAA,CAGPa,WAHOb,GAGO,UAACkB,CAAD,EAACA;AACb9D,MAAAA,CAAAA,CAAK8B,KAAL9B,CAAW+F,OAAX/F,CAAmB8D,CAAnB9D;AAAmB8D,KA1NjBzE,EA0NiByE,CA1NjBzE;AA0NiByE;;AAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,EAAAA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAtNrBrE,iBAsNqBqE,GAtNrBrE,YAAAA;AACEC,SAAKC,kBAALD;AAAKC,GAqNcmE,EArNdnE,CAAAA,CAGPC,oBAHOD,GAGPC,YAAAA;AACEF,SAAKG,cAALH;AAAKG,GAiNciE,EAjNdjE,CAAAA,CAGPC,kBAHOD,GAGPC,YAAAA;AACEJ,SAAKG,cAALH,IACAA,KAAKC,kBAALD,EADAA;AACKC,GA4McmE,EA5MdnE,CAAAA,CA+MPqG,WA/MOrG,GA+MPqG,YAAAA;AACE,WAAA,KAAYzG,QAAZ;AAAYA,GAJOuE,EAIPvE,CAAAA,CAGdmC,MAHcnC,GAGdmC,YAAAA;AACE,WAAA,IAAA;AAAA,GARmBoC,EAQnB,CARmBA;AAQnB,CAlOEzE,CAAiBC,CAAjBD,CAFN;;AAEMA,CAAAA,CAqOG4G,SArOH5G,GAqOe;AACjB2D,EAAAA,MAAAA,EAAQkD,CAAAA,CAAUC,MAAVD,CAAiBE,UADR;AAEjBjD,EAAAA,YAAAA,EAAc+C,CAAAA,CAAUC,MAFP;AAGjBjC,EAAAA,gBAAAA,EAAkBgC,CAAAA,CAAUG,IAHX;AAIjBjG,EAAAA,oBAAAA,EAAsB8F,CAAAA,CAAUI,MAAVJ,CAAiBE,UAJtB;AAKjB/F,EAAAA,UAAAA,EAAY6F,CAAAA,CAAUI,MALL;AAMjBhG,EAAAA,MAAAA,EAAQ4F,CAAAA,CAAUI,MAND;AAOjB/F,EAAAA,IAAAA,EAAM2F,CAAAA,CAAUK,MAPC;AAQjB/F,EAAAA,WAAAA,EAAa0F,CAAAA,CAAUI,MARN;AASjB7F,EAAAA,SAAAA,EAAWyF,CAAAA,CAAUC,MATJ;AAUjBzF,EAAAA,cAAAA,EAAgBwF,CAAAA,CAAUM,IAVT;AAWjB7F,EAAAA,SAAAA,EAAWuF,CAAAA,CAAUM,IAXJ;AAYjB5F,EAAAA,iBAAAA,EAAmBsF,CAAAA,CAAUM,IAZZ;AAajB3F,EAAAA,WAAAA,EAAaqF,CAAAA,CAAUM,IAbN;AAcjB1F,EAAAA,IAAAA,EAAMoF,CAAAA,CAAUO,KAdC;AAejB1F,EAAAA,KAAAA,EAAOmF,CAAAA,CAAUI,MAfA;AAgBjBtF,EAAAA,SAAAA,EAAWkF,CAAAA,CAAUI,MAhBJ;AAiBjBrF,EAAAA,SAAAA,EAAWiF,CAAAA,CAAUK,MAjBJ;AAkBjBrF,EAAAA,KAAAA,EAAOgF,CAAAA,CAAUK,MAlBA;AAmBjBpF,EAAAA,QAAAA,EAAU+E,CAAAA,CAAUI,MAnBH;AAoBjBlF,EAAAA,MAAAA,EAAQ8E,CAAAA,CAAUG,IApBD;AAqBjBhF,EAAAA,aAAAA,EAAe6E,CAAAA,CAAUG,IArBR;AAsBjB/E,EAAAA,iBAAAA,EAAmB4E,CAAAA,CAAUM,IAtBZ;AAuBjBjF,EAAAA,cAAAA,EAAgB2E,CAAAA,CAAUM,IAvBT;AAwBjBhF,EAAAA,kBAAAA,EAAoB0E,CAAAA,CAAUM,IAxBb;AAyBjB/E,EAAAA,MAAAA,EAAQyE,CAAAA,CAAUQ,SAAVR,CAAoB,CAACA,CAAAA,CAAUM,IAAX,EAAiBN,CAAAA,CAAUC,MAA3B,CAApBD,CAzBS;AA0BjBxE,EAAAA,MAAAA,EAAQwE,CAAAA,CAAUG,IA1BD;AA2BjB1E,EAAAA,YAAAA,EAAcuE,CAAAA,CAAUG,IA3BP;AA4BjBxE,EAAAA,QAAAA,EAAUqE,CAAAA,CAAUS,KAAVT,CAAgB9G,CAAhB8G,CA5BO;AA6BjBtE,EAAAA,MAAAA,EAAQsE,CAAAA,CAAUG,IA7BD;AA8BjBxC,EAAAA,OAAAA,EAASqC,CAAAA,CAAUG,IA9BF;AA+BjBtC,EAAAA,SAAAA,EAAWmC,CAAAA,CAAUG,IA/BJ;AAgCjBrC,EAAAA,SAAAA,EAAWkC,CAAAA,CAAUG,IAhCJ;AAiCjBlC,EAAAA,QAAAA,EAAU+B,CAAAA,CAAUG,IAjCH;AAkCjBN,EAAAA,OAAAA,EAASG,CAAAA,CAAUG;AAlCF,CArOfhH,EAAAA,CAAAA,CA0QGuH,YA1QHvH,GA0QkB;AACpB6E,EAAAA,gBAAAA,EAAkB,YAAA,CAAA,CADE;AAEpB5D,EAAAA,MAAAA,EAAQ,wBAFY;AAGpBC,EAAAA,IAAAA,EAAM,EAHc;AAIpBC,EAAAA,WAAAA,EAAa,QAJO;AAKpBE,EAAAA,cAAAA,EAAAA,CAAgB,CALI;AAMpBC,EAAAA,SAAAA,EAAAA,CAAW,CANS;AAOpBC,EAAAA,iBAAAA,EAAAA,CAAmB,CAPC;AAQpBC,EAAAA,WAAAA,EAAAA,CAAa,CARO;AASpBI,EAAAA,SAAAA,EAAW,CATS;AAUpBC,EAAAA,KAAAA,EAAO,CAVa;AAWpBK,EAAAA,cAAAA,EAAAA,CAAgB,CAXI;AAYpBC,EAAAA,kBAAAA,EAAAA,CAAoB,CAZA;AAapBC,EAAAA,MAAAA,EAAAA,CAAQ,CAbY;AAcpBI,EAAAA,QAAAA,EAAU,WAdU;AAepBD,EAAAA,MAAAA,EAAQ,YAAA,CAAA,CAfY;AAgBpBiC,EAAAA,OAAAA,EAAS,YAAA,CAAA,CAhBW;AAiBpBE,EAAAA,SAAAA,EAAW,YAAA,CAAA,CAjBS;AAkBpBC,EAAAA,SAAAA,EAAW,YAAA,CAAA,CAlBS;AAmBpBG,EAAAA,QAAAA,EAAU,YAAA,CAAA,CAnBU;AAoBpB4B,EAAAA,OAAAA,EAAS,YAAA,CAAA;AApBW,CA1QlB1G;AA8RO,eAAA,CAAA","sourcesContent":["import { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport { FlyToInterpolator } from 'react-map-gl'\nimport WebMercatorViewport from 'viewport-mercator-project'\nimport mapboxgl from 'mapbox-gl'\n\nconst VALID_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right']\n\nclass Geocoder extends PureComponent {\n  geocoder = null\n  cachedResult = null\n\n  componentDidMount() {\n    this.initializeGeocoder()\n  }\n\n  componentWillUnmount() {\n    this.removeGeocoder()\n  }\n\n  componentDidUpdate() {\n    this.removeGeocoder()\n    this.initializeGeocoder()\n  }\n\n  initializeGeocoder = () => {\n    const mapboxMap = this.getMapboxMap()\n    const containerNode = this.getContainerNode()\n    const {\n      mapboxApiAccessToken,\n      inputValue,\n      origin,\n      zoom,\n      placeholder,\n      proximity,\n      trackProximity,\n      collapsed,\n      clearAndBlurOnEsc,\n      clearOnBlur,\n      bbox,\n      types,\n      countries,\n      minLength,\n      limit,\n      language,\n      filter,\n      localGeocoder,\n      localGeocoderOnly,\n      reverseGeocode,\n      enableEventLogging,\n      marker,\n      render,\n      getItemValue,\n      onInit,\n      position\n    } = this.props\n    const options = {\n      accessToken: mapboxApiAccessToken,\n      origin,\n      zoom,\n      flyTo: false,\n      placeholder,\n      proximity,\n      trackProximity,\n      collapsed,\n      clearAndBlurOnEsc,\n      clearOnBlur,\n      bbox,\n      types,\n      countries,\n      minLength,\n      limit,\n      language,\n      filter,\n      localGeocoder,\n      localGeocoderOnly,\n      reverseGeocode,\n      enableEventLogging,\n      marker,\n      mapboxgl\n    }\n\n    if (render && typeof render === 'function') {\n      options.render = render\n    }\n\n    if (getItemValue && typeof getItemValue === 'function') {\n      options.getItemValue = getItemValue\n    }\n\n    this.geocoder = new MapboxGeocoder(options)\n    this.subscribeEvents()\n\n    if (containerNode) {\n      containerNode.appendChild(this.geocoder.onAdd(mapboxMap))\n    } else {\n      mapboxMap.addControl(this.geocoder, VALID_POSITIONS.find((_position) => position === _position))\n    }\n\n    if (inputValue !== undefined && inputValue !== null) {\n      this.geocoder.setInput(inputValue)\n    } else if (this.cachedResult) {\n      this.geocoder.setInput(this.cachedResult.place_name)\n    }\n\n    if (this.cachedResult || (inputValue !== undefined && inputValue !== null)) {\n      this.showClearIcon()\n    }\n\n    onInit(this.geocoder)\n  }\n\n  showClearIcon = () => {\n    // this is a hack to force clear icon to show if there is text in the input\n    this.geocoder._clearEl.style.display = 'block'\n  }\n\n  getMapboxMap = () => {\n    const { mapRef } = this.props\n\n    return (mapRef && mapRef.current && mapRef.current.getMap()) || null\n  }\n\n  getContainerNode = () => {\n    const { containerRef } = this.props\n\n    return (containerRef && containerRef.current) || null\n  }\n\n  subscribeEvents = () => {\n    this.geocoder.on('clear', this.handleClear)\n    this.geocoder.on('loading', this.handleLoading)\n    this.geocoder.on('results', this.handleResults)\n    this.geocoder.on('result', this.handleResult)\n    this.geocoder.on('error', this.handleError)\n  }\n\n  unsubscribeEvents = () => {\n    this.geocoder.off('clear', this.handleClear)\n    this.geocoder.off('loading', this.handleLoading)\n    this.geocoder.off('results', this.handleResults)\n    this.geocoder.off('result', this.handleResult)\n    this.geocoder.off('error', this.handleError)\n  }\n\n  removeGeocoder = () => {\n    const mapboxMap = this.getMapboxMap()\n\n    this.unsubscribeEvents()\n\n    if (mapboxMap && mapboxMap.removeControl) {\n      this.getMapboxMap().removeControl(this.geocoder)\n    }\n\n    this.geocoder = null\n  }\n\n  handleClear = () => {\n    this.cachedResult = null\n    this.props.onClear()\n  }\n\n  handleLoading = (event) => {\n    this.props.onLoading(event)\n  }\n\n  handleResults = (event) => {\n    this.props.onResults(event)\n  }\n\n  handleResult = (event) => {\n    const { result } = event\n    const { onViewportChange, onResult } = this.props\n    const { bbox, center, properties = {} } = result\n    const { short_code } = properties\n    const [longitude, latitude] = center\n    const bboxExceptions = {\n      fr: {\n        name: 'France',\n        bbox: [[-4.59235, 41.380007], [9.560016, 51.148506]]\n      },\n      us: {\n        name: 'United States',\n        bbox: [[-171.791111, 18.91619], [-66.96466, 71.357764]]\n      },\n      ru: {\n        name: 'Russia',\n        bbox: [[19.66064, 41.151416], [190.10042, 81.2504]]\n      },\n      ca: {\n        name: 'Canada',\n        bbox: [[-140.99778, 41.675105], [-52.648099, 83.23324]]\n      }\n    }\n    const { width, height } = this.getMapboxMap()\n      .getContainer()\n      .getBoundingClientRect()\n    let zoom = this.geocoder.options.zoom\n    const fitBounds = (bounds, viewport) => new WebMercatorViewport(viewport).fitBounds(bounds)\n\n    try {\n      if (!bboxExceptions[short_code] && bbox) {\n        zoom = fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]], { width, height }).zoom\n      } else if (bboxExceptions[short_code]) {\n        zoom = fitBounds(bboxExceptions[short_code].bbox, { width, height }).zoom\n      }\n    } catch (e) {\n      console.warn('following result caused an error when trying to zoom to bbox: ', result) // eslint-disable-line\n      zoom = this.geocoder.options.zoom\n    }\n\n    onViewportChange({\n      longitude,\n      latitude,\n      zoom,\n      transitionInterpolator: new FlyToInterpolator(),\n      transitionDuration: 3000\n    })\n    onResult(event)\n\n    this.cachedResult = result\n    this.geocoder._typeahead.selected = null\n    this.showClearIcon()\n  }\n\n  handleError = (event) => {\n    this.props.onError(event)\n  }\n\n  getGeocoder() {\n    return this.geocoder\n  }\n\n  render() {\n    return null\n  }\n\n  static propTypes = {\n    mapRef: PropTypes.object.isRequired,\n    containerRef: PropTypes.object,\n    onViewportChange: PropTypes.func,\n    mapboxApiAccessToken: PropTypes.string.isRequired,\n    inputValue: PropTypes.string,\n    origin: PropTypes.string,\n    zoom: PropTypes.number,\n    placeholder: PropTypes.string,\n    proximity: PropTypes.object,\n    trackProximity: PropTypes.bool,\n    collapsed: PropTypes.bool,\n    clearAndBlurOnEsc: PropTypes.bool,\n    clearOnBlur: PropTypes.bool,\n    bbox: PropTypes.array,\n    types: PropTypes.string,\n    countries: PropTypes.string,\n    minLength: PropTypes.number,\n    limit: PropTypes.number,\n    language: PropTypes.string,\n    filter: PropTypes.func,\n    localGeocoder: PropTypes.func,\n    localGeocoderOnly: PropTypes.bool,\n    reverseGeocode: PropTypes.bool,\n    enableEventLogging: PropTypes.bool,\n    marker: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    render: PropTypes.func,\n    getItemValue: PropTypes.func,\n    position: PropTypes.oneOf(VALID_POSITIONS),\n    onInit: PropTypes.func,\n    onClear: PropTypes.func,\n    onLoading: PropTypes.func,\n    onResults: PropTypes.func,\n    onResult: PropTypes.func,\n    onError: PropTypes.func\n  }\n\n  static defaultProps = {\n    onViewportChange: () => {},\n    origin: 'https://api.mapbox.com',\n    zoom: 16,\n    placeholder: 'Search',\n    trackProximity: false,\n    collapsed: false,\n    clearAndBlurOnEsc: false,\n    clearOnBlur: false,\n    minLength: 2,\n    limit: 5,\n    reverseGeocode: false,\n    enableEventLogging: true,\n    marker: true,\n    position: 'top-right',\n    onInit: () => {},\n    onClear: () => {},\n    onLoading: () => {},\n    onResults: () => {},\n    onResult: () => {},\n    onError: () => {}\n  }\n}\n\nexport default Geocoder\n"]},"metadata":{},"sourceType":"module"}