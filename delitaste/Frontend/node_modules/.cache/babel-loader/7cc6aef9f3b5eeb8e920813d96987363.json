{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/OrderTracking/OrderStatus/ChatBox.js\",\n    _s = $RefreshSig$();\n\nimport withAuth from \"components/HigherOrderComponents(HOC)/withAuth\";\nimport React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport \"../OrderTracking.scss\";\nimport Avatar from \"assets/avatar.jpg\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBox(props) {\n  _s();\n\n  const {\n    message,\n    setMessage,\n    messages,\n    setMessages,\n    socket\n  } = props;\n  const {\n    shipper\n  } = props;\n  const {\n    order_code\n  } = props.match.params;\n  useEffect(() => {\n    socket.emit(\"join-room\", order_code);\n    socket.on(\"receive-shipper-inbox\", (message, order_code) => {\n      setMessages(prev => [...prev, {\n        sender: \"shipper\",\n        message: message.content\n      }]);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"or-st-pre-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"or-st-ship-conversation\",\n        children: messages === null || messages === void 0 ? void 0 : messages.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `or-st-chat-item-${item.sender}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"or-st-chat-avatar\",\n            src: item.sender === \"shipper\" ? shipper.profile_image : Avatar,\n            alt: \"shipper_image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"or-st-chat-item-content\",\n            children: item.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"or-st-ship-chat-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"or-st-chat-content\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          name: \"chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"or-st-chat-submit\",\n          onClick: () => {\n            if (message !== \"\") {\n              setMessages(prev => [...prev, {\n                sender: \"customer\",\n                message: message\n              }]);\n              socket.emit(\"customer-inbox\", message, order_code);\n              setMessage(\"\");\n            }\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatBox, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ChatBox;\nChatBox.propTypes = {\n  user: PropTypes.object.isRequired,\n  product: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.UserReducer,\n  product: state.ProductReducer\n});\n\nexport default withRouter(withAuth(connect(mapStateToProps, null)(ChatBox)));\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/OrderTracking/OrderStatus/ChatBox.js"],"names":["withAuth","React","Fragment","useState","useEffect","useRef","withRouter","connect","PropTypes","Avatar","io","ChatBox","props","message","setMessage","messages","setMessages","socket","shipper","order_code","match","params","emit","on","prev","sender","content","map","item","index","profile_image","e","target","value","propTypes","user","object","isRequired","product","mapStateToProps","state","UserReducer","ProductReducer"],"mappings":"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","sourcesContent":["import withAuth from \"components/HigherOrderComponents(HOC)/withAuth\";\nimport React, { Fragment, useState, useEffect, useRef } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport \"../OrderTracking.scss\";\nimport Avatar from \"assets/avatar.jpg\";\nimport io from \"socket.io-client\";\n\nfunction ChatBox(props) {\n  const { message, setMessage, messages, setMessages, socket } = props;\n  const { shipper } = props;\n  const { order_code } = props.match.params;\n\n  useEffect(() => {\n    socket.emit(\"join-room\", order_code);\n    socket.on(\"receive-shipper-inbox\", (message, order_code) => {\n      setMessages((prev) => [\n        ...prev,\n        { sender: \"shipper\", message: message.content },\n      ]);\n    });\n  }, []);\n\n  return (\n    <Fragment>\n      <div className=\"or-st-pre-body\">\n        <div className=\"or-st-ship-conversation\">\n          {messages?.map((item, index) => (\n            <div key={index} className={`or-st-chat-item-${item.sender}`}>\n              <img\n                className=\"or-st-chat-avatar\"\n                src={item.sender === \"shipper\" ? shipper.profile_image : Avatar}\n                alt=\"shipper_image\"\n              />\n              <span className=\"or-st-chat-item-content\">{item.message}</span>\n            </div>\n          ))}\n        </div>\n        <div className=\"or-st-ship-chat-bar\">\n          <input\n            className=\"or-st-chat-content\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            name=\"chat\"\n          />\n          <div\n            className=\"or-st-chat-submit\"\n            onClick={() => {\n              if (message !== \"\") {\n                setMessages((prev) => [\n                  ...prev,\n                  { sender: \"customer\", message: message },\n                ]);\n                socket.emit(\"customer-inbox\", message, order_code);\n                setMessage(\"\");\n              }\n            }}\n          >\n            Send\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nChatBox.propTypes = {\n  user: PropTypes.object.isRequired,\n  product: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.UserReducer,\n  product: state.ProductReducer,\n});\n\nexport default withRouter(withAuth(connect(mapStateToProps, null)(ChatBox)));\n"]},"metadata":{},"sourceType":"module"}