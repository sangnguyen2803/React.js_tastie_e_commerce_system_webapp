{"ast":null,"code":"import * as yup from \"yup\";\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nconst timeRegExp = /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/; //schema\n\nconst validateMerchantForm1 = yup.object().shape({\n  name: yup.string().required(\"Merchant name is required\"),\n  phone: yup.string().matches(phoneRegExp, \"Phone number is not valid\").min(10, \"Phone number must be exactly 10 characters long\").max(10, \"Phone number must be exactly 10 characters long\"),\n  city: yup.string().required(\"Please select a city\"),\n  district: yup.string().required(\"Please select a district\"),\n  ward: yup.string().required(\"Please select a ward\"),\n  road: yup.string()\n});\nconst validateMerchantForm2 = yup.object().shape({\n  companyName: yup.string().required(\"This field cannot be left empty.\"),\n  companyAddress: yup.string().required(\"This field cannot be left empty.\"),\n  representativeName: yup.string().required(\"This field cannot be left empty.\"),\n  representativeEmail: yup.string().email(\"Invalid email\").required(\"This field cannot be left empty.\"),\n  phone1: yup.string().min(10, \"Phone number must be exactly 10 characters long\").max(10, \"Phone number must be exactly 10 characters long\").required(\"This field cannot be left empty.\"),\n  idCardNumber: yup.string().required(\"This field cannot be left empty.\"),\n  taxCode: yup.string().required(\"This field cannot be left empty.\")\n});\nconst validateMerchantForm3 = yup.object().shape({\n  rushHour: yup.string().matches(timeRegExp, \"Incorrect time format, must be hh:mm:ss or hh:mm \")\n});\nconst validateMerchantForm5 = yup.object().shape({\n  idCardNumberBank: yup.string(),\n  dateOfIssue: yup.date().required(\"This field is required.\"),\n  bankBeneficiaryName: yup.string(),\n  bankAccountNumber: yup.string().matches(/^[0-9]+$/, \"Must be only digits\").min(12, \"Bank account must be over 12 digits in length.\"),\n  bankName: yup.string(),\n  bankProvince: yup.string(),\n  bankBranch: yup.string()\n});\nexport { validateMerchantForm1, validateMerchantForm2, validateMerchantForm3, validateMerchantForm5 };","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/utils/FormUtils/MerchantFormValidate.js"],"names":["yup","phoneRegExp","timeRegExp","validateMerchantForm1","object","shape","name","string","required","phone","matches","min","max","city","district","ward","road","validateMerchantForm2","companyName","companyAddress","representativeName","representativeEmail","email","phone1","idCardNumber","taxCode","validateMerchantForm3","rushHour","validateMerchantForm5","idCardNumberBank","dateOfIssue","date","bankBeneficiaryName","bankAccountNumber","bankName","bankProvince","bankBranch"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\nconst timeRegExp = /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/;\n//schema\nconst validateMerchantForm1 = yup.object().shape({\n  name: yup.string().required(\"Merchant name is required\"),\n  phone: yup\n    .string()\n    .matches(phoneRegExp, \"Phone number is not valid\")\n    .min(10, \"Phone number must be exactly 10 characters long\")\n    .max(10, \"Phone number must be exactly 10 characters long\"),\n  city: yup.string().required(\"Please select a city\"),\n  district: yup.string().required(\"Please select a district\"),\n  ward: yup.string().required(\"Please select a ward\"),\n  road: yup.string(),\n});\n\nconst validateMerchantForm2 = yup.object().shape({\n  companyName: yup.string().required(\"This field cannot be left empty.\"),\n  companyAddress: yup.string().required(\"This field cannot be left empty.\"),\n  representativeName: yup.string().required(\"This field cannot be left empty.\"),\n  representativeEmail: yup\n    .string()\n    .email(\"Invalid email\")\n    .required(\"This field cannot be left empty.\"),\n  phone1: yup\n    .string()\n    .min(10, \"Phone number must be exactly 10 characters long\")\n    .max(10, \"Phone number must be exactly 10 characters long\")\n    .required(\"This field cannot be left empty.\"),\n  idCardNumber: yup.string().required(\"This field cannot be left empty.\"),\n  taxCode: yup.string().required(\"This field cannot be left empty.\"),\n});\n\nconst validateMerchantForm3 = yup.object().shape({\n  rushHour: yup\n    .string()\n    .matches(timeRegExp, \"Incorrect time format, must be hh:mm:ss or hh:mm \"),\n});\n\nconst validateMerchantForm5 = yup.object().shape({\n  idCardNumberBank: yup.string(),\n  dateOfIssue: yup.date().required(\"This field is required.\"),\n  bankBeneficiaryName: yup.string(),\n  bankAccountNumber: yup\n    .string()\n    .matches(/^[0-9]+$/, \"Must be only digits\")\n    .min(12, \"Bank account must be over 12 digits in length.\"),\n  bankName: yup.string(),\n  bankProvince: yup.string(),\n  bankBranch: yup.string(),\n});\n  \nexport {\n  validateMerchantForm1,\n  validateMerchantForm2,\n  validateMerchantForm3,\n  validateMerchantForm5,\n};\n"]},"metadata":{},"sourceType":"module"}