{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/Commons/Overlay/Popup/Panel/AddressBookPanel.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport Button from \"components/Commons/Button/Button\";\nimport ButtonGroup from \"components/Commons/Button/ButtonGroup/ButtonGroup\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Formik, Form, Field } from \"formik\";\nimport locations from \"assets/json_location/locations\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faBuilding, faAddressBook, faDotCircle, faUndo, faPowerOff } from \"@fortawesome/fontawesome-free-solid\";\nimport ReactMapGl, { Source, Layer, Marker, Popup } from \"react-map-gl\";\nimport axios from \"axios\";\nimport { faMapMarkedAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"components/Commons/Overlay/Popup/Modal/Modal\";\nimport { setCurrentLocation, addAddressAPI, getAddressBookAPI } from \"store/actions/UserAction/UserAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues2 = {\n  address: \"\",\n  longitude: \"\",\n  latitude: \"\",\n  city: \"\",\n  district: \"\",\n  ward: \"\",\n  road: \"\",\n  type: 1\n};\n\nfunction AddressBookPanel(props) {\n  _s();\n\n  var _user$profile2;\n\n  //address\n  const {\n    user,\n    addAddressAPI,\n    getAddressBookAPI\n  } = props;\n  const selectedAddressType = {\n    border: \"1px solid #101010\",\n    backgroundColor: \"#f6f6f6\"\n  };\n  const [addressType, setAddressType] = useState(1);\n  const [latitude, setLatitude] = useState(10.768685473523648);\n  const [longitude, setLongitude] = useState(106.68057155417674);\n  const [viewport, setViewport] = useState({\n    width: \"100%\",\n    height: \"200px\",\n    latitude: 10.768685473523648,\n    longitude: 106.68057155417674,\n    zoom: 12\n  });\n  const [contact, setContact] = useState([]);\n\n  async function fetchAddressBook() {\n    var _user$profile;\n\n    var result = await getAddressBookAPI(user === null || user === void 0 ? void 0 : (_user$profile = user.profile) === null || _user$profile === void 0 ? void 0 : _user$profile.user_id);\n    console.log(result);\n    setContact(result);\n  }\n\n  useEffect(() => {\n    fetchAddressBook();\n  }, [user === null || user === void 0 ? void 0 : (_user$profile2 = user.profile) === null || _user$profile2 === void 0 ? void 0 : _user$profile2.user_id]);\n\n  const getFullAddress = (road, city_id, district_id, ward_id) => {\n    const address = [];\n    locations.filter(city => city.code == city_id).map(selectedCity => {\n      address.unshift(selectedCity.name);\n      selectedCity.districts.filter(district => district.code == district_id).map(selectedDistrict => {\n        address.unshift(selectedDistrict.name);\n        selectedDistrict.wards.filter(ward => ward.code == ward_id).map(selectedWard => {\n          address.unshift(selectedWard.name);\n        });\n      });\n    });\n    if (road) address.unshift(road);\n    return address.join(\", \");\n  };\n\n  const handleGeoCoding = values => {\n    const {\n      road,\n      city,\n      district,\n      ward\n    } = values;\n    const address = getFullAddress(road, city, district, ward);\n    if (!address) return;\n    const endpoint = `https://api.geoapify.com/v1/geocode/search?text=${address}&apiKey=05e76b96155e447ba0391d645ce81d27`;\n\n    async function fetchCoordinates(url) {\n      var _result$data, _result$data$features;\n\n      const result = await axios.get(url);\n\n      if (((_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$features = _result$data.features) === null || _result$data$features === void 0 ? void 0 : _result$data$features.length) !== 0) {\n        var _result$data$features2, _result$data$features3, _result$data$features4, _result$data$features5, _result$data$features6, _result$data$features7, _result$data$features8, _result$data$features9;\n\n        setLongitude((_result$data$features2 = result.data.features[0]) === null || _result$data$features2 === void 0 ? void 0 : (_result$data$features3 = _result$data$features2.geometry) === null || _result$data$features3 === void 0 ? void 0 : _result$data$features3.coordinates[0]);\n        setLatitude((_result$data$features4 = result.data.features[0]) === null || _result$data$features4 === void 0 ? void 0 : (_result$data$features5 = _result$data$features4.geometry) === null || _result$data$features5 === void 0 ? void 0 : _result$data$features5.coordinates[1]);\n        setViewport({ ...viewport,\n          latitude: (_result$data$features6 = result.data.features[0]) === null || _result$data$features6 === void 0 ? void 0 : (_result$data$features7 = _result$data$features6.geometry) === null || _result$data$features7 === void 0 ? void 0 : _result$data$features7.coordinates[1],\n          longitude: (_result$data$features8 = result.data.features[0]) === null || _result$data$features8 === void 0 ? void 0 : (_result$data$features9 = _result$data$features8.geometry) === null || _result$data$features9 === void 0 ? void 0 : _result$data$features9.coordinates[0]\n        });\n        return;\n      }\n    }\n\n    fetchCoordinates(endpoint);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      openModal: props.visible,\n      closeModal: () => {\n        props.setVisible(false);\n      },\n      title: \"Address Book\",\n      widthPX: 810,\n      height: 560,\n      padding: \"5px 10px\",\n      transparent: \"30%\",\n      hideHeader: true,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues2,\n        validateOnChange: false,\n        children: formikProps => {\n          const {\n            values,\n            errors,\n            touched\n          } = formikProps;\n\n          const getPosition = () => {\n            return new Promise((res, rej) => {\n              navigator.geolocation.getCurrentPosition(res, rej);\n            });\n          };\n\n          const relocating = async values => {\n            var position = await getPosition();\n            const {\n              latitude,\n              longitude\n            } = position.coords;\n            const endpoint = `https://api.geoapify.com/v1/geocode/reverse?lat=${latitude}&lon=${longitude}&apiKey=05e76b96155e447ba0391d645ce81d27`;\n            let res = await axios.get(endpoint);\n            var address = \"\";\n\n            if (res.data) {\n              var _res$data, _res$data$features$, _res$data$features$$p;\n\n              address = ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$features$ = _res$data.features[0]) === null || _res$data$features$ === void 0 ? void 0 : (_res$data$features$$p = _res$data$features$.properties) === null || _res$data$features$$p === void 0 ? void 0 : _res$data$features$$p.formatted) || \"\";\n            }\n\n            props.setCurrentLocation(latitude, longitude, address);\n          };\n\n          const handleGeoCoding = values => {\n            const {\n              road,\n              city,\n              district,\n              ward\n            } = values;\n            const address = getFullAddress(road, city, district, ward);\n            if (!address) return;\n            const endpoint = `https://api.geoapify.com/v1/geocode/search?text=${address}&apiKey=05e76b96155e447ba0391d645ce81d27`;\n\n            async function fetchCoordinates(url) {\n              var _result$data2, _result$data2$feature;\n\n              const result = await axios.get(url);\n\n              if (((_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$feature = _result$data2.features) === null || _result$data2$feature === void 0 ? void 0 : _result$data2$feature.length) !== 0) {\n                var _result$data$features10, _result$data$features11, _result$data$features12, _result$data$features13, _result$data$features14, _result$data$features15, _result$data$features16, _result$data$features17;\n\n                setLongitude((_result$data$features10 = result.data.features[0]) === null || _result$data$features10 === void 0 ? void 0 : (_result$data$features11 = _result$data$features10.geometry) === null || _result$data$features11 === void 0 ? void 0 : _result$data$features11.coordinates[0]);\n                setLatitude((_result$data$features12 = result.data.features[0]) === null || _result$data$features12 === void 0 ? void 0 : (_result$data$features13 = _result$data$features12.geometry) === null || _result$data$features13 === void 0 ? void 0 : _result$data$features13.coordinates[1]);\n                setViewport({ ...viewport,\n                  latitude: (_result$data$features14 = result.data.features[0]) === null || _result$data$features14 === void 0 ? void 0 : (_result$data$features15 = _result$data$features14.geometry) === null || _result$data$features15 === void 0 ? void 0 : _result$data$features15.coordinates[1],\n                  longitude: (_result$data$features16 = result.data.features[0]) === null || _result$data$features16 === void 0 ? void 0 : (_result$data$features17 = _result$data$features16.geometry) === null || _result$data$features17 === void 0 ? void 0 : _result$data$features17.coordinates[0]\n                });\n                return;\n              }\n            }\n\n            fetchCoordinates(endpoint);\n          };\n\n          return /*#__PURE__*/_jsxDEV(Form, {\n            className: \"p-pd-content-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-pd-general-profile-wrapper\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-pd-general-profile-row\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"p-pd-text-secondary\",\n                    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                      className: \"p-pd-address-icon\",\n                      icon: faDotCircle\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: user.currentAddress.address\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 21\n                }, this), user.location.map((address, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-pd-general-profile-row\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"p-pd-text-secondary\",\n                    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                      className: \"p-pd-address-icon\",\n                      icon: address.type === 1 ? faHome : address.type === 2 ? faBuilding : faAddressBook\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: address.address\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 25\n                  }, this)\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 23\n                }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-pd-general-profile-row \",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"p-pd-b-gp-label\",\n                    style: {\n                      width: \"10%\"\n                    },\n                    children: \"Location:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    className: \"p-pd-b-iu-input-general-select\",\n                    as: \"select\",\n                    style: {\n                      width: \"30%\",\n                      height: \"35px\"\n                    },\n                    name: \"city\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      disabled: true,\n                      hidden: true,\n                      children: \"Select a city...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 207,\n                      columnNumber: 25\n                    }, this), locations.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: city.code,\n                      label: city.name\n                    }, city.code, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 27\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 23\n                  }, this), \"\\u2014\", /*#__PURE__*/_jsxDEV(Field, {\n                    className: \"p-pd-b-iu-input-general-select\",\n                    as: \"select\",\n                    style: {\n                      width: \"30%\",\n                      height: \"35px\"\n                    },\n                    name: \"district\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      disabled: true,\n                      hidden: true,\n                      children: \"Select a district...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 225,\n                      columnNumber: 25\n                    }, this), locations.filter(city => city.code == values.city).map(selectedCity => selectedCity.districts.map(district => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: district.code,\n                      label: district.name\n                    }, district.code, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 31\n                    }, this)))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 23\n                  }, this), \"\\u2014\", /*#__PURE__*/_jsxDEV(Field, {\n                    className: \"p-pd-b-iu-input-general-select\",\n                    style: {\n                      width: \"30%\",\n                      height: \"35px\"\n                    },\n                    as: \"select\",\n                    name: \"ward\",\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      disabled: true,\n                      hidden: true,\n                      children: \"Select a ward...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 247,\n                      columnNumber: 25\n                    }, this), locations.filter(city => city.code == values.city).map(selectedCity => selectedCity.districts.filter(district => district.code == values.district).map(selectedDistrict => selectedDistrict.wards.map(ward => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: ward.code,\n                      label: ward.name\n                    }, ward.code, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 259,\n                      columnNumber: 35\n                    }, this))))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-pd-general-profile-row\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"p-pd-b-gp-label\",\n                    style: {\n                      width: \"10%\"\n                    },\n                    children: \"Address:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    type: \"text\",\n                    name: \"road\",\n                    className: \"p-pd-b-iu-input-general\",\n                    placeholder: \"Road. Eg. 100A, St. Laurant Street\",\n                    style: {\n                      width: \"526px\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-pd-general-profile-row\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"p-pd-b-gp-label\",\n                    style: {\n                      width: \"10%\"\n                    },\n                    children: \"Type:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"p-pd-a-item\",\n                    onClick: () => setAddressType(1),\n                    style: addressType === 1 ? selectedAddressType : {},\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"p-pd-a-image-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                        icon: faHome,\n                        className: \"p-pd-a-icon\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 298,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 297,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"p-pd-a-label-radio\",\n                      children: \"House\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 303,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"p-pd-a-item\",\n                    onClick: () => setAddressType(2),\n                    style: addressType === 2 ? selectedAddressType : {},\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"p-pd-a-image-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                        icon: faBuilding,\n                        className: \"p-pd-a-icon\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 311,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"p-pd-a-label-radio\",\n                      children: \"Workplace\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 316,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"p-pd-a-item\",\n                    onClick: () => setAddressType(3),\n                    style: addressType === 3 ? selectedAddressType : {},\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"p-pd-a-image-wrapper\",\n                      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                        icon: faAddressBook,\n                        className: \"p-pd-a-icon\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 324,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"p-pd-a-label-radio\",\n                      children: \"Other\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n                  gap: 5,\n                  mgTop: 5,\n                  mgBottom: 5,\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    width: 140,\n                    height: 25,\n                    fontSize: 12,\n                    color: \"black\",\n                    marginTop: 20,\n                    bglight: true,\n                    border: \"#5d5d5d 1.5px solid\",\n                    justifyContent: \"center\",\n                    label: \"Check on map\",\n                    prefix: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                      className: \"button-icon\",\n                      icon: faMapMarkedAlt\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 344,\n                      columnNumber: 27\n                    }, this),\n                    onClick: () => {\n                      handleGeoCoding(values);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    width: 120,\n                    height: 25,\n                    fontSize: 12,\n                    color: \"black\",\n                    marginTop: 20,\n                    gap: 10,\n                    bglight: true,\n                    border: \"#5d5d5d 1.5px solid\",\n                    justifyContent: \"center\",\n                    label: \"Relocating\",\n                    prefix: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                      className: \"button-icon\",\n                      icon: faPowerOff\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 365,\n                      columnNumber: 27\n                    }, this),\n                    onClick: () => relocating()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"p-pd-general-profile-row\",\n                  children: /*#__PURE__*/_jsxDEV(ReactMapGl, {\n                    transitionDuration: 1000,\n                    ...viewport,\n                    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n                    onViewportChange: viewport => setViewport(viewport),\n                    mapboxApiAccessToken: \"pk.eyJ1IjoiaG9hbmduYW0yNDMiLCJhIjoiY2t1dHJxdjdlMHg5ZDJwbnlpcmo0a2NnMiJ9.DUrlIOzvO6-kWt-VCKZW1g\",\n                    children: /*#__PURE__*/_jsxDEV(Marker, {\n                      latitude: latitude,\n                      longitude: longitude,\n                      offsetLeft: -20,\n                      offsetTop: -30,\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        alt: \"marker\",\n                        style: {\n                          height: 30,\n                          width: 30\n                        },\n                        src: \"https://xuonginthanhpho.com/wp-content/uploads/2020/03/map-marker-icon.png\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 387,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 381,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n                mgTop: 5,\n                float: \"center\",\n                mgBottom: 15,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  color: \"white\",\n                  bgColor: \"#101010\",\n                  justifyContent: \"center\",\n                  gap: \"10px\",\n                  width: 120,\n                  height: 35,\n                  label: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressBookPanel, \"DrQjY2p2qOmHNbu2dnEr4Hflgro=\");\n\n_c = AddressBookPanel;\nAddressBookPanel.propTypes = {\n  user: PropTypes.object.isRequired,\n  getAddressBookAPI: PropTypes.func.isRequired,\n  setCurrentLocation: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.UserReducer\n});\n\nexport default withRouter(connect(mapStateToProps, {\n  getAddressBookAPI,\n  setCurrentLocation\n})(AddressBookPanel));\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressBookPanel\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/18VP-Graduation_Project-Tastie-Frontend/delitaste/Frontend/src/components/Commons/Overlay/Popup/Panel/AddressBookPanel.js"],"names":["React","Fragment","useState","useEffect","Button","ButtonGroup","withRouter","connect","PropTypes","Formik","Form","Field","locations","FontAwesomeIcon","faHome","faBuilding","faAddressBook","faDotCircle","faUndo","faPowerOff","ReactMapGl","Source","Layer","Marker","Popup","axios","faMapMarkedAlt","Modal","setCurrentLocation","addAddressAPI","getAddressBookAPI","initialValues2","address","longitude","latitude","city","district","ward","road","type","AddressBookPanel","props","user","selectedAddressType","border","backgroundColor","addressType","setAddressType","setLatitude","setLongitude","viewport","setViewport","width","height","zoom","contact","setContact","fetchAddressBook","result","profile","user_id","console","log","getFullAddress","city_id","district_id","ward_id","filter","code","map","selectedCity","unshift","name","districts","selectedDistrict","wards","selectedWard","join","handleGeoCoding","values","endpoint","fetchCoordinates","url","get","data","features","length","geometry","coordinates","visible","setVisible","formikProps","errors","touched","getPosition","Promise","res","rej","navigator","geolocation","getCurrentPosition","relocating","position","coords","properties","formatted","currentAddress","location","index","propTypes","object","isRequired","func","mapStateToProps","state","UserReducer"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport Button from \"components/Commons/Button/Button\";\nimport ButtonGroup from \"components/Commons/Button/ButtonGroup/ButtonGroup\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Formik, Form, Field } from \"formik\";\nimport locations from \"assets/json_location/locations\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faHome,\n  faBuilding,\n  faAddressBook,\n  faDotCircle,\n  faUndo,\n  faPowerOff,\n} from \"@fortawesome/fontawesome-free-solid\";\n\nimport ReactMapGl, { Source, Layer, Marker, Popup } from \"react-map-gl\";\nimport axios from \"axios\";\nimport { faMapMarkedAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"components/Commons/Overlay/Popup/Modal/Modal\";\nimport {\n  setCurrentLocation,\n  addAddressAPI,\n  getAddressBookAPI,\n} from \"store/actions/UserAction/UserAction\";\n\nconst initialValues2 = {\n  address: \"\",\n  longitude: \"\",\n  latitude: \"\",\n  city: \"\",\n  district: \"\",\n  ward: \"\",\n  road: \"\",\n  type: 1,\n};\n\nfunction AddressBookPanel(props) {\n  //address\n  const { user, addAddressAPI, getAddressBookAPI } = props;\n  const selectedAddressType = {\n    border: \"1px solid #101010\",\n    backgroundColor: \"#f6f6f6\",\n  };\n  const [addressType, setAddressType] = useState(1);\n  const [latitude, setLatitude] = useState(10.768685473523648);\n  const [longitude, setLongitude] = useState(106.68057155417674);\n  const [viewport, setViewport] = useState({\n    width: \"100%\",\n    height: \"200px\",\n    latitude: 10.768685473523648,\n    longitude: 106.68057155417674,\n    zoom: 12,\n  });\n  const [contact, setContact] = useState([]);\n  async function fetchAddressBook() {\n    var result = await getAddressBookAPI(user?.profile?.user_id);\n    console.log(result);\n    setContact(result);\n  }\n  useEffect(() => {\n    fetchAddressBook();\n  }, [user?.profile?.user_id]);\n  const getFullAddress = (road, city_id, district_id, ward_id) => {\n    const address = [];\n    locations\n      .filter((city) => city.code == city_id)\n      .map((selectedCity) => {\n        address.unshift(selectedCity.name);\n        selectedCity.districts\n          .filter((district) => district.code == district_id)\n          .map((selectedDistrict) => {\n            address.unshift(selectedDistrict.name);\n            selectedDistrict.wards\n              .filter((ward) => ward.code == ward_id)\n              .map((selectedWard) => {\n                address.unshift(selectedWard.name);\n              });\n          });\n      });\n    if (road) address.unshift(road);\n    return address.join(\", \");\n  };\n  const handleGeoCoding = (values) => {\n    const { road, city, district, ward } = values;\n    const address = getFullAddress(road, city, district, ward);\n    if (!address) return;\n    const endpoint = `https://api.geoapify.com/v1/geocode/search?text=${address}&apiKey=05e76b96155e447ba0391d645ce81d27`;\n    async function fetchCoordinates(url) {\n      const result = await axios.get(url);\n      if (result.data?.features?.length !== 0) {\n        setLongitude(result.data.features[0]?.geometry?.coordinates[0]);\n        setLatitude(result.data.features[0]?.geometry?.coordinates[1]);\n        setViewport({\n          ...viewport,\n          latitude: result.data.features[0]?.geometry?.coordinates[1],\n          longitude: result.data.features[0]?.geometry?.coordinates[0],\n        });\n        return;\n      }\n    }\n    fetchCoordinates(endpoint);\n  };\n  return (\n    <Fragment>\n      <Modal\n        openModal={props.visible}\n        closeModal={() => {\n          props.setVisible(false);\n        }}\n        title={\"Address Book\"}\n        widthPX={810}\n        height={560}\n        padding=\"5px 10px\"\n        transparent=\"30%\"\n        hideHeader={true}\n      >\n        <Formik initialValues={initialValues2} validateOnChange={false}>\n          {(formikProps) => {\n            const { values, errors, touched } = formikProps;\n            const getPosition = () => {\n              return new Promise((res, rej) => {\n                navigator.geolocation.getCurrentPosition(res, rej);\n              });\n            };\n            const relocating = async (values) => {\n              var position = await getPosition();\n              const { latitude, longitude } = position.coords;\n              const endpoint = `https://api.geoapify.com/v1/geocode/reverse?lat=${latitude}&lon=${longitude}&apiKey=05e76b96155e447ba0391d645ce81d27`;\n              let res = await axios.get(endpoint);\n              var address = \"\";\n              if (res.data) {\n                address = res.data?.features[0]?.properties?.formatted || \"\";\n              }\n              props.setCurrentLocation(latitude, longitude, address);\n            };\n            const handleGeoCoding = (values) => {\n              const { road, city, district, ward } = values;\n              const address = getFullAddress(road, city, district, ward);\n              if (!address) return;\n              const endpoint = `https://api.geoapify.com/v1/geocode/search?text=${address}&apiKey=05e76b96155e447ba0391d645ce81d27`;\n              async function fetchCoordinates(url) {\n                const result = await axios.get(url);\n                if (result.data?.features?.length !== 0) {\n                  setLongitude(\n                    result.data.features[0]?.geometry?.coordinates[0]\n                  );\n                  setLatitude(\n                    result.data.features[0]?.geometry?.coordinates[1]\n                  );\n                  setViewport({\n                    ...viewport,\n                    latitude: result.data.features[0]?.geometry?.coordinates[1],\n                    longitude:\n                      result.data.features[0]?.geometry?.coordinates[0],\n                  });\n                  return;\n                }\n              }\n              fetchCoordinates(endpoint);\n            };\n            return (\n              <Form className=\"p-pd-content-wrapper\">\n                <Fragment>\n                  <div className=\"p-pd-general-profile-wrapper\">\n                    <div className=\"p-pd-general-profile-row\">\n                      <div className=\"p-pd-text-secondary\">\n                        <FontAwesomeIcon\n                          className=\"p-pd-address-icon\"\n                          icon={faDotCircle}\n                        />\n                        <span>{user.currentAddress.address}</span>\n                      </div>\n                    </div>\n                    {user.location.map((address, index) => (\n                      <div className=\"p-pd-general-profile-row\" key={index}>\n                        <div className=\"p-pd-text-secondary\">\n                          <FontAwesomeIcon\n                            className=\"p-pd-address-icon\"\n                            icon={\n                              address.type === 1\n                                ? faHome\n                                : address.type === 2\n                                ? faBuilding\n                                : faAddressBook\n                            }\n                          />\n                          <span>{address.address}</span>\n                        </div>\n                      </div>\n                    ))}\n                    <div className=\"p-pd-general-profile-row \">\n                      <span\n                        className=\"p-pd-b-gp-label\"\n                        style={{ width: \"10%\" }}\n                      >\n                        Location:\n                      </span>\n                      <Field\n                        className=\"p-pd-b-iu-input-general-select\"\n                        as=\"select\"\n                        style={{ width: \"30%\", height: \"35px\" }}\n                        name=\"city\"\n                      >\n                        <option value=\"\" disabled hidden>\n                          Select a city...\n                        </option>\n                        {locations.map((city) => (\n                          <option\n                            key={city.code}\n                            value={city.code}\n                            label={city.name}\n                          />\n                        ))}\n                      </Field>\n                      —\n                      <Field\n                        className=\"p-pd-b-iu-input-general-select\"\n                        as=\"select\"\n                        style={{ width: \"30%\", height: \"35px\" }}\n                        name=\"district\"\n                      >\n                        <option value=\"\" disabled hidden>\n                          Select a district...\n                        </option>\n                        {locations\n                          .filter((city) => city.code == values.city)\n                          .map((selectedCity) =>\n                            selectedCity.districts.map((district) => (\n                              <option\n                                key={district.code}\n                                value={district.code}\n                                label={district.name}\n                              />\n                            ))\n                          )}\n                      </Field>\n                      —\n                      <Field\n                        className=\"p-pd-b-iu-input-general-select\"\n                        style={{ width: \"30%\", height: \"35px\" }}\n                        as=\"select\"\n                        name=\"ward\"\n                      >\n                        <option value=\"\" disabled hidden>\n                          Select a ward...\n                        </option>\n                        {locations\n                          .filter((city) => city.code == values.city)\n                          .map((selectedCity) =>\n                            selectedCity.districts\n                              .filter(\n                                (district) => district.code == values.district\n                              )\n                              .map((selectedDistrict) =>\n                                selectedDistrict.wards.map((ward) => (\n                                  <option\n                                    key={ward.code}\n                                    value={ward.code}\n                                    label={ward.name}\n                                  />\n                                ))\n                              )\n                          )}\n                      </Field>\n                    </div>\n\n                    <div className=\"p-pd-general-profile-row\">\n                      <span\n                        className=\"p-pd-b-gp-label\"\n                        style={{ width: \"10%\" }}\n                      >\n                        Address:\n                      </span>\n                      <Field\n                        type=\"text\"\n                        name=\"road\"\n                        className=\"p-pd-b-iu-input-general\"\n                        placeholder={\"Road. Eg. 100A, St. Laurant Street\"}\n                        style={{ width: \"526px\" }}\n                      />\n                    </div>\n                    <div className=\"p-pd-general-profile-row\">\n                      <span\n                        className=\"p-pd-b-gp-label\"\n                        style={{ width: \"10%\" }}\n                      >\n                        Type:\n                      </span>\n                      <div\n                        className=\"p-pd-a-item\"\n                        onClick={() => setAddressType(1)}\n                        style={addressType === 1 ? selectedAddressType : {}}\n                      >\n                        <div className=\"p-pd-a-image-wrapper\">\n                          <FontAwesomeIcon\n                            icon={faHome}\n                            className=\"p-pd-a-icon\"\n                          />\n                        </div>\n                        <span className=\"p-pd-a-label-radio\">House</span>\n                      </div>\n                      <div\n                        className=\"p-pd-a-item\"\n                        onClick={() => setAddressType(2)}\n                        style={addressType === 2 ? selectedAddressType : {}}\n                      >\n                        <div className=\"p-pd-a-image-wrapper\">\n                          <FontAwesomeIcon\n                            icon={faBuilding}\n                            className=\"p-pd-a-icon\"\n                          />\n                        </div>\n                        <span className=\"p-pd-a-label-radio\">Workplace</span>\n                      </div>\n                      <div\n                        className=\"p-pd-a-item\"\n                        onClick={() => setAddressType(3)}\n                        style={addressType === 3 ? selectedAddressType : {}}\n                      >\n                        <div className=\"p-pd-a-image-wrapper\">\n                          <FontAwesomeIcon\n                            icon={faAddressBook}\n                            className=\"p-pd-a-icon\"\n                          />\n                        </div>\n                        <span className=\"p-pd-a-label-radio\">Other</span>\n                      </div>\n                    </div>\n                    <ButtonGroup gap={5} mgTop={5} mgBottom={5}>\n                      <Button\n                        width={140}\n                        height={25}\n                        fontSize={12}\n                        color={\"black\"}\n                        marginTop={20}\n                        bglight={true}\n                        border={\"#5d5d5d 1.5px solid\"}\n                        justifyContent={\"center\"}\n                        label=\"Check on map\"\n                        prefix={\n                          <FontAwesomeIcon\n                            className=\"button-icon\"\n                            icon={faMapMarkedAlt}\n                          />\n                        }\n                        onClick={() => {\n                          handleGeoCoding(values);\n                        }}\n                      />\n                      <Button\n                        width={120}\n                        height={25}\n                        fontSize={12}\n                        color={\"black\"}\n                        marginTop={20}\n                        gap={10}\n                        bglight={true}\n                        border={\"#5d5d5d 1.5px solid\"}\n                        justifyContent={\"center\"}\n                        label=\"Relocating\"\n                        prefix={\n                          <FontAwesomeIcon\n                            className=\"button-icon\"\n                            icon={faPowerOff}\n                          />\n                        }\n                        onClick={() => relocating()}\n                      />\n                    </ButtonGroup>\n                    <div className=\"p-pd-general-profile-row\">\n                      <ReactMapGl\n                        transitionDuration={1000}\n                        {...viewport}\n                        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n                        onViewportChange={(viewport) => setViewport(viewport)}\n                        mapboxApiAccessToken=\"pk.eyJ1IjoiaG9hbmduYW0yNDMiLCJhIjoiY2t1dHJxdjdlMHg5ZDJwbnlpcmo0a2NnMiJ9.DUrlIOzvO6-kWt-VCKZW1g\"\n                      >\n                        <Marker\n                          latitude={latitude}\n                          longitude={longitude}\n                          offsetLeft={-20}\n                          offsetTop={-30}\n                        >\n                          <img\n                            alt=\"marker\"\n                            style={{ height: 30, width: 30 }}\n                            src=\"https://xuonginthanhpho.com/wp-content/uploads/2020/03/map-marker-icon.png\"\n                          />\n                        </Marker>\n                      </ReactMapGl>\n                    </div>\n                  </div>\n                  <ButtonGroup mgTop={5} float=\"center\" mgBottom={15}>\n                    <Button\n                      color={\"white\"}\n                      bgColor={\"#101010\"}\n                      justifyContent={\"center\"}\n                      gap={\"10px\"}\n                      width={120}\n                      height={35}\n                      label={\"Update\"}\n                    />\n                  </ButtonGroup>\n                </Fragment>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modal>\n    </Fragment>\n  );\n}\n\nAddressBookPanel.propTypes = {\n  user: PropTypes.object.isRequired,\n  getAddressBookAPI: PropTypes.func.isRequired,\n  setCurrentLocation: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.UserReducer,\n});\nexport default withRouter(\n  connect(mapStateToProps, { getAddressBookAPI, setCurrentLocation })(\n    AddressBookPanel\n  )\n);\n"]},"metadata":{},"sourceType":"module"}