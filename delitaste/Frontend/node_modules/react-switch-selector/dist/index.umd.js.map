{"version":3,"file":"index.umd.js","sources":["../src/SwitchSelector.styled.ts","../src/SwitchSelector.tsx","../src/defaultColors.ts"],"sourcesContent":["import {createElement} from \"react\";\nimport {setup, styled} from \"goober\";\nimport {shouldForwardProp} from \"goober/should-forward-prop\";\n\nconst propToOmitInDom = [\n    \"fontSize\",\n    \"fontColor\",\n    \"selectedFontColor\",\n    \"optionsAmount\",\n    \"optionBorderRadius\",\n    \"isRawText\",\n    \"selectedIndex\",\n    \"border\",\n    \"backgroundColor\",\n    \"selectedBackgroundColor\",\n    \"wrapperBorderRadius\",\n    \"selectionIndicatorMargin\",\n    \"disabled\"\n];\n\nsetup(\n    createElement,\n    undefined,\n    undefined,\n    shouldForwardProp((prop) => !propToOmitInDom.includes(prop))\n);\n\nexport type StylingPropsTypes = {\n    border: string | number;\n    backgroundColor: string;\n    selectedBackgroundColor: string;\n    wrapperBorderRadius: number;\n    optionBorderRadius: number;\n    fontSize: number;\n    fontColor: string;\n    selectedFontColor: string;\n    selectionIndicatorMargin: number;\n};\n\ninterface SwitchSelectorWrapperPropTypes\n    extends Pick<\n        StylingPropsTypes,\n        | \"border\"\n        | \"backgroundColor\"\n        | \"selectedBackgroundColor\"\n        | \"wrapperBorderRadius\"\n        | \"optionBorderRadius\"\n        | \"selectionIndicatorMargin\"\n    > {\n    selectedIndex: number;\n    optionsAmount: number;\n    disabled: boolean;\n}\n\nexport const SwitchSelectorWrapper = styled(\"div\")<SwitchSelectorWrapperPropTypes>`\n    display: flex;\n    border-radius: ${(props) => props.wrapperBorderRadius}px;\n    border: ${(props) => props.border};\n    background: ${(props) => props.backgroundColor};\n    width: 100%;\n    height: 100%;\n    position: relative;\n    opacity: ${(props) => (props.disabled ? 0.7 : 1)};\n\n    &::before {\n        top: 50%;\n        left: ${(props) => (props.selectedIndex / props.optionsAmount) * 100}%;\n        content: \"\";\n        position: absolute;\n        height: calc(100% - ${(props) => 2 * props.selectionIndicatorMargin}px);\n        width: calc(\n            ${(props) => (1 / props.optionsAmount) * 100}%${\" - \"}${(props) =>\n                    2 * props.selectionIndicatorMargin}px\n        );\n        border-radius: ${(props) => props.optionBorderRadius}px;\n        border: ${(props) => props.selectionIndicatorMargin}px solid\n            ${(props) => props.backgroundColor};\n        background: ${(props) => props.selectedBackgroundColor};\n        transition: left 0.1s linear, background 0.1s linear;\n        transform: translateY(-50%);\n        z-index: 1;\n        box-sizing: content-box;\n    }\n`;\n\ninterface OptionItemPropsTypes extends Pick<StylingPropsTypes, \"optionBorderRadius\"> {\n    optionsAmount: number;\n}\n\nexport const OptionItem = styled(\"div\")<OptionItemPropsTypes>`\n    display: flex;\n    align-items: center;\n    height: 100%;\n    width: ${(props) => (1 / props.optionsAmount) * 100}%;\n    border-radius: ${(props) => props.optionBorderRadius}px;\n`;\n\ninterface OptionItemLabelPropsTypes\n    extends Partial<Pick<StylingPropsTypes, \"fontSize\" | \"fontColor\" | \"selectedFontColor\">> {\n    isRawText: boolean;\n    selected: boolean;\n    disabled: boolean;\n}\n\nexport const OptionItemLabel = styled(\"label\")<OptionItemLabelPropsTypes>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    z-index: 2;\n    transition: color 0.1s linear;\n    cursor: ${(props) => (props.disabled ? \"not-allowed\" : \"pointer\")};\n    font-size: ${(props) => (props.isRawText ? props.fontSize + \"px\" : \"unset\")};\n    color: ${(props) =>\n        props.isRawText ? (props.selected ? props.selectedFontColor : props.fontColor) : \"unset\"};\n`;\n\nexport const OptionInput = styled(\"input\")`\n    width: 0;\n    height: 0;\n    opacity: 0;\n    z-index: -1;\n    position: absolute;\n    pointer-events: none;\n`;\n","import React from \"react\";\nimport {useEffect} from \"react\";\nimport {\n    SwitchSelectorWrapper,\n    OptionItem,\n    OptionItemLabel,\n    OptionInput\n} from \"./SwitchSelector.styled\";\nimport {StylingPropsTypes} from \"./SwitchSelector.styled\";\nimport {defaultColors} from \"./defaultColors\";\n\nexport type OptionType = {\n    label: string | number | React.ReactElement | HTMLElement;\n    value: unknown;\n    selectedBackgroundColor?: string;\n    fontColor?: string;\n    selectedFontColor?: string;\n};\n\nexport interface Props extends Partial<StylingPropsTypes> {\n    options: Array<OptionType>;\n    onChange?: <T extends any>(val: T) => void;\n    initialSelectedIndex?: number;\n    forcedSelectedIndex?: number;\n    disabled?: boolean;\n}\n\nconst classNamesPrefix = \"react-switch-selector\";\n\nconst SwitchSelector: React.FC<Props> = (props) => {\n    const {onChange = (): void => {}, options = [], initialSelectedIndex = 0} = props;\n    const canApplyInitialSelectedIndex = !!options[initialSelectedIndex];\n    const [selectedIndex, setSelectedIndex] = React.useState(\n        canApplyInitialSelectedIndex ? initialSelectedIndex : 0\n    );\n\n    const {\n        border = 0,\n        backgroundColor = defaultColors.backgroundColor,\n        selectedBackgroundColor = defaultColors.selectedBackgroundColor,\n        wrapperBorderRadius = 20,\n        optionBorderRadius = 18,\n        fontSize = 14,\n        fontColor = defaultColors.fontColor,\n        selectedFontColor = defaultColors.selectedFontColor,\n        selectionIndicatorMargin = 2,\n        forcedSelectedIndex,\n        disabled = false\n    } = props;\n\n    useEffect(() => {\n        if (\n            forcedSelectedIndex !== undefined &&\n            !!options[forcedSelectedIndex] &&\n            forcedSelectedIndex !== selectedIndex\n        ) {\n            setSelectedIndex(forcedSelectedIndex);\n        }\n    }, [forcedSelectedIndex, options, selectedIndex]);\n\n    const handleOnClick = (index: number): void => {\n        if (!disabled && index !== selectedIndex) {\n            setSelectedIndex(index);\n            onChange(options[index].value);\n        }\n    };\n\n    const renderOptions = (): React.ReactElement[] => {\n        return options.map((option, index) => {\n            const _optionId = `rss-option-${index}`;\n            const isRawText = typeof option.label === \"string\";\n\n            const labelRawTextProps = {\n                fontSize,\n                fontColor: option.fontColor || fontColor,\n                selectedFontColor: option.selectedFontColor || selectedFontColor\n            };\n\n            return (\n                <OptionItem\n                    key={_optionId}\n                    optionsAmount={options.length}\n                    className={`${classNamesPrefix}-option`}\n                    optionBorderRadius={optionBorderRadius}\n                >\n                    <OptionItemLabel\n                        className={`${classNamesPrefix}-option-label`}\n                        selected={selectedIndex === index}\n                        isRawText={isRawText}\n                        disabled={disabled}\n                        aria-disabled={disabled}\n                        {...(isRawText ? labelRawTextProps : {})}\n                    >\n                        <OptionInput\n                            type=\"radio\"\n                            id={_optionId}\n                            onChange={(): void => handleOnClick(index)}\n                            checked={selectedIndex === index}\n                        />\n                        {option.label}\n                    </OptionItemLabel>\n                </OptionItem>\n            );\n        });\n    };\n\n    if (!options.length) return null;\n    return (\n        <SwitchSelectorWrapper\n            selectedIndex={selectedIndex}\n            optionsAmount={options.length}\n            className={`${classNamesPrefix}-wrapper ${\n                disabled ? `${classNamesPrefix}-disabled` : \"\"\n            }`}\n            border={border}\n            backgroundColor={backgroundColor}\n            selectedBackgroundColor={\n                options[selectedIndex]?.selectedBackgroundColor || selectedBackgroundColor\n            }\n            wrapperBorderRadius={wrapperBorderRadius}\n            optionBorderRadius={optionBorderRadius}\n            selectionIndicatorMargin={selectionIndicatorMargin}\n            disabled={disabled}\n        >\n            {renderOptions()}\n        </SwitchSelectorWrapper>\n    );\n};\n\nexport default SwitchSelector;\n","export const defaultColors = {\n    backgroundColor: \"#ecf0f1\",\n    selectedBackgroundColor: \"#2ecc71\",\n    fontColor: \"#000\",\n    selectedFontColor: \"#fff\"\n};\n"],"names":["propToOmitInDom","setup","createElement","undefined","shouldForwardProp","prop","includes","SwitchSelectorWrapper","styled","props","wrapperBorderRadius","border","backgroundColor","disabled","selectedIndex","optionsAmount","selectionIndicatorMargin","optionBorderRadius","selectedBackgroundColor","OptionItem","OptionItemLabel","isRawText","fontSize","selected","selectedFontColor","fontColor","OptionInput","classNamesPrefix","onChange","options","initialSelectedIndex","React","useState","setSelectedIndex","forcedSelectedIndex","useEffect","length","className","map","option","index","_optionId","label","key","type","id","value","handleOnClick","checked"],"mappings":"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"}